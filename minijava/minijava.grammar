Helpers
letter = [['a' .. 'z'] + ['A' .. 'Z']];
digit = ['0' .. '9'];

Tokens 
classn = 'class';
extends = 'extends';
public = 'public';
static = 'static';
void = 'void';
main = 'main';
string = 'String';
int = 'int';
boolean = 'boolean';
if = 'if';
else = 'else';
while = 'while';
length = 'length' ;
new = 'new';
true = 'true';
false = 'false';
return = 'return';
this = 'this';

id = letter (letter | digit | '_')*;
number = digit (digit)*;

plusminusop = '+' | '-';
timesop = '*';
and = '&&';
less = '<';
op = '&&' | '<' | '+' | '-' | '*';

equal = '=';
not = '!';
l_bracket = '[';
r_bracket = ']';
l_brace = '{';
r_brace = '}';
l_parenthese = '(';
r_parenthese = ')';
dot = '.';
semicolon = ';';
comma = ',' ;

blank = (' ' | 10 | 13 | 9)*;

print = 'System.out.println';

Productions
program = 
     mainclass classdecl*;

mainclass {-> mainclass} = 
     classn [classname]:id l_brace [mainmethod]:mainmethod r_brace {-> New mainclass(classname, mainmethod.mainmethod)};

mainmethod {-> mainmethod} =
     public static void main l_parenthese string l_bracket r_bracket [paramname]:id r_parenthese l_brace [statements]:statement r_brace {-> New mainmethod(paramname, statements.statement)}; 

classdecl {-> classdecl} = 
     {simpleclass} classn [classname]:id 
                   l_brace 
                       [vars]:vardecl* 
                       [methods]:methoddecl*
                   r_brace
     {-> New classdecl(classname, Null, [vars.vardecl], [methods.methoddecl])}
   | {extendingclass} classn [classname]:id extends [super]:id 
                      l_brace
                          [vars]:vardecl* 
                          [methods]:methoddecl*
		      r_brace 
     {-> New classdecl(classname, super, [vars.vardecl], [methods.methoddecl])};
 
vardecl {-> vardecl} = 
    type [varname]:id semicolon {-> New vardecl(type, varname)};

methoddecl {-> methoddecl} =
    public type [methodname]:id l_parenthese [parameters]:paramlist r_parenthese 
        l_brace
	     [vars]:vardecl* 
	     [statements]:statement* 
	     return [returnexpression]:exp semicolon 
        r_brace
    {-> New methoddecl(type, methodname, [parameters.parameter], [vars.vardecl], [statements.statement], returnexpression.exp)};

paramlist {-> parameter*} = 
      {firstparameter} parameter paramrest* {-> [parameter, paramrest.parameter]}
    | {empty} blank {-> []};

paramrest {-> parameter} =
    {anotherparameter} comma type id {-> New parameter(type, id)};

parameter {-> parameter} = 
    type id {-> New parameter(type, id)};

type =
      {intvector} int l_bracket r_bracket 
    | {boolean} boolean 
    | {int} int 
    | {id} id ;

statement =
      {statements} l_brace statement* r_brace
    | {ifelse} if l_parenthese exp r_parenthese [ifstatement]:statement else [elsestatement]:statement 
    | {while} while l_parenthese exp r_parenthese statement 
    | {print} print l_parenthese exp r_parenthese semicolon
    | {attr} id equal exp semicolon 
    | {arrayattr} id l_bracket [arrayindex]:exp r_bracket equal [righthandside]:exp semicolon;

exp = andstm_list;

andstm_list =
    less_than andstm_rest*;

andstm_rest =
    and less_than;

less_than = 
    plus_minus_list less_than_plus_minus? ;

less_than_plus_minus = 
    less plus_minus_list;

plus_minus_list = times_list plus_minus_rest* ;

plus_minus_rest = 
    plusminusop times_list;

times_list =
    prefixexp times_rest* ; 

times_rest =
    timesop prefixexp;

prefixexp =
      {not_expression} notexp 
    | {expression} postfixexp_list;

notexp = 
    not+ postfixexp_list;

postfixexp_list = 
    primary_exp postfixexp_rest*;

postfixexp_rest = 
      {index} l_bracket exp r_bracket
    | {idlist} exp dot id l_parenthese explist r_parenthese
    | {length} exp dot length ;

primary_exp = 
      {number} number
    | {true} true
    | {false} false
    | {id} id
    | {this} this
    | {newint} new int l_bracket exp r_bracket
    | {newid} new id l_parenthese r_parenthese
    | {lparexprpar} l_parenthese exp r_parenthese ;

explist = 
    {explisthead} exp exprest* |
    {blank} blank;

exprest = 
    comma exp;

Abstract Syntax Tree
mainclass = 
     [classname]:id [mainmethod]:mainmethod;

mainmethod =
     [paramname]:id [statements]:statement;

classdecl = 
     [classname]:id [super]:id? [vars]:vardecl* [methods]:methoddecl*;
 
vardecl = 
    type [varname]:id;

methoddecl =
    type [methodname]:id [parameters]:parameter*
         [vars]:vardecl*
 	 [statements]:statement* 
	 [returnexpression]:exp;

parameter = 
    type id;

type =
      {intvector} int l_bracket r_bracket 
    | {boolean} boolean 
    | {int} int 
    | {id} id ;

statement =
    {statements} [statements]:statement*
  | {ifelse} [ifexp]:exp [ifstatement]:statement [elsestatement]:statement
  | {while} [whileexp]:exp [statement]:statement
  | {print} [exp]:exp
  | {attr} [id]:id [exp]:exp
  | {arrayattr} [id]:id [arrayindex]:exp [righthandside]:exp;

exp =
      {op} [left]:exp [op]:op [right]:exp 
    | {arrayget} [pointer]:exp [offset]:exp 
    | {length} [exp]:exp 
    | {idlist} [exp]:exp [id]:id [explist]:explist
    | {number} [number]:number
    | {true} true
    | {false} false
    | {id} [id]:id
    | {this} this
    | {newintarray} [exp]:exp
    | {newid} [id]:id
    | {notexp} [exp]:exp
    | {lparexprpar} [exp]:exp;

explist = 
    [exps]:exp*;
