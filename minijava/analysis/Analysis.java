/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseAMainclass(AMainclass node);
    void caseAMainmethod(AMainmethod node);
    void caseAClassdecl(AClassdecl node);
    void caseAVardecl(AVardecl node);
    void caseAMethoddecl(AMethoddecl node);
    void caseAParameter(AParameter node);
    void caseAIntvectorType(AIntvectorType node);
    void caseABooleanType(ABooleanType node);
    void caseAIntType(AIntType node);
    void caseAIdType(AIdType node);
    void caseAStatementlistStatement(AStatementlistStatement node);
    void caseAIfelseStatement(AIfelseStatement node);
    void caseAWhileStatement(AWhileStatement node);
    void caseAPrintStatement(APrintStatement node);
    void caseAAttrStatement(AAttrStatement node);
    void caseAArrayattrStatement(AArrayattrStatement node);
    void caseAAndExp(AAndExp node);
    void caseALessExp(ALessExp node);
    void caseAMulExp(AMulExp node);
    void caseAAddExp(AAddExp node);
    void caseASubExp(ASubExp node);
    void caseAIndexExp(AIndexExp node);
    void caseALengthExp(ALengthExp node);
    void caseAMethodcallExp(AMethodcallExp node);
    void caseANumberExp(ANumberExp node);
    void caseATrueExp(ATrueExp node);
    void caseAFalseExp(AFalseExp node);
    void caseAIdExp(AIdExp node);
    void caseAThisExp(AThisExp node);
    void caseANewintarrayExp(ANewintarrayExp node);
    void caseANewidExp(ANewidExp node);
    void caseANotexpExp(ANotexpExp node);
    void caseALparexprparExp(ALparexprparExp node);
    void caseAPreposExp(APreposExp node);

    void caseTClassn(TClassn node);
    void caseTExtends(TExtends node);
    void caseTPublic(TPublic node);
    void caseTStatic(TStatic node);
    void caseTVoid(TVoid node);
    void caseTMain(TMain node);
    void caseTString(TString node);
    void caseTInt(TInt node);
    void caseTBoolean(TBoolean node);
    void caseTIf(TIf node);
    void caseTElse(TElse node);
    void caseTWhile(TWhile node);
    void caseTLength(TLength node);
    void caseTNew(TNew node);
    void caseTTrue(TTrue node);
    void caseTFalse(TFalse node);
    void caseTReturn(TReturn node);
    void caseTThis(TThis node);
    void caseTId(TId node);
    void caseTNumber(TNumber node);
    void caseTPlusop(TPlusop node);
    void caseTMinusop(TMinusop node);
    void caseTTimesop(TTimesop node);
    void caseTAnd(TAnd node);
    void caseTLess(TLess node);
    void caseTOp(TOp node);
    void caseTEqual(TEqual node);
    void caseTNot(TNot node);
    void caseTLBracket(TLBracket node);
    void caseTRBracket(TRBracket node);
    void caseTLBrace(TLBrace node);
    void caseTRBrace(TRBrace node);
    void caseTLParenthese(TLParenthese node);
    void caseTRParenthese(TRParenthese node);
    void caseTDot(TDot node);
    void caseTSemicolon(TSemicolon node);
    void caseTComma(TComma node);
    void caseTBlank(TBlank node);
    void caseTPrint(TPrint node);
    void caseEOF(EOF node);
}
