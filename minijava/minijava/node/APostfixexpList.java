/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import java.util.*;
import analysis.*;

@SuppressWarnings("nls")
public final class APostfixexpList extends PPostfixexpList
{
    private PPrimaryExp _primaryExp_;
    private final LinkedList<PPostfixexpRest> _postfixexpRest_ = new LinkedList<PPostfixexpRest>();

    public APostfixexpList()
    {
        // Constructor
    }

    public APostfixexpList(
        @SuppressWarnings("hiding") PPrimaryExp _primaryExp_,
        @SuppressWarnings("hiding") List<PPostfixexpRest> _postfixexpRest_)
    {
        // Constructor
        setPrimaryExp(_primaryExp_);

        setPostfixexpRest(_postfixexpRest_);

    }

    @Override
    public Object clone()
    {
        return new APostfixexpList(
            cloneNode(this._primaryExp_),
            cloneList(this._postfixexpRest_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPostfixexpList(this);
    }

    public PPrimaryExp getPrimaryExp()
    {
        return this._primaryExp_;
    }

    public void setPrimaryExp(PPrimaryExp node)
    {
        if(this._primaryExp_ != null)
        {
            this._primaryExp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._primaryExp_ = node;
    }

    public LinkedList<PPostfixexpRest> getPostfixexpRest()
    {
        return this._postfixexpRest_;
    }

    public void setPostfixexpRest(List<PPostfixexpRest> list)
    {
        this._postfixexpRest_.clear();
        this._postfixexpRest_.addAll(list);
        for(PPostfixexpRest e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._primaryExp_)
            + toString(this._postfixexpRest_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._primaryExp_ == child)
        {
            this._primaryExp_ = null;
            return;
        }

        if(this._postfixexpRest_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._primaryExp_ == oldChild)
        {
            setPrimaryExp((PPrimaryExp) newChild);
            return;
        }

        for(ListIterator<PPostfixexpRest> i = this._postfixexpRest_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PPostfixexpRest) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
