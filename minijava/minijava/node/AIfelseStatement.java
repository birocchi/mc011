/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AIfelseStatement extends PStatement
{
    private TIf _if_;
    private TLParenthese _lParenthese_;
    private PExp _exp_;
    private TRParenthese _rParenthese_;
    private PStatement _ifstatement_;
    private TElse _else_;
    private PStatement _elsestatement_;

    public AIfelseStatement()
    {
        // Constructor
    }

    public AIfelseStatement(
        @SuppressWarnings("hiding") TIf _if_,
        @SuppressWarnings("hiding") TLParenthese _lParenthese_,
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") TRParenthese _rParenthese_,
        @SuppressWarnings("hiding") PStatement _ifstatement_,
        @SuppressWarnings("hiding") TElse _else_,
        @SuppressWarnings("hiding") PStatement _elsestatement_)
    {
        // Constructor
        setIf(_if_);

        setLParenthese(_lParenthese_);

        setExp(_exp_);

        setRParenthese(_rParenthese_);

        setIfstatement(_ifstatement_);

        setElse(_else_);

        setElsestatement(_elsestatement_);

    }

    @Override
    public Object clone()
    {
        return new AIfelseStatement(
            cloneNode(this._if_),
            cloneNode(this._lParenthese_),
            cloneNode(this._exp_),
            cloneNode(this._rParenthese_),
            cloneNode(this._ifstatement_),
            cloneNode(this._else_),
            cloneNode(this._elsestatement_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfelseStatement(this);
    }

    public TIf getIf()
    {
        return this._if_;
    }

    public void setIf(TIf node)
    {
        if(this._if_ != null)
        {
            this._if_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._if_ = node;
    }

    public TLParenthese getLParenthese()
    {
        return this._lParenthese_;
    }

    public void setLParenthese(TLParenthese node)
    {
        if(this._lParenthese_ != null)
        {
            this._lParenthese_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lParenthese_ = node;
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public TRParenthese getRParenthese()
    {
        return this._rParenthese_;
    }

    public void setRParenthese(TRParenthese node)
    {
        if(this._rParenthese_ != null)
        {
            this._rParenthese_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rParenthese_ = node;
    }

    public PStatement getIfstatement()
    {
        return this._ifstatement_;
    }

    public void setIfstatement(PStatement node)
    {
        if(this._ifstatement_ != null)
        {
            this._ifstatement_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ifstatement_ = node;
    }

    public TElse getElse()
    {
        return this._else_;
    }

    public void setElse(TElse node)
    {
        if(this._else_ != null)
        {
            this._else_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._else_ = node;
    }

    public PStatement getElsestatement()
    {
        return this._elsestatement_;
    }

    public void setElsestatement(PStatement node)
    {
        if(this._elsestatement_ != null)
        {
            this._elsestatement_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elsestatement_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._if_)
            + toString(this._lParenthese_)
            + toString(this._exp_)
            + toString(this._rParenthese_)
            + toString(this._ifstatement_)
            + toString(this._else_)
            + toString(this._elsestatement_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._if_ == child)
        {
            this._if_ = null;
            return;
        }

        if(this._lParenthese_ == child)
        {
            this._lParenthese_ = null;
            return;
        }

        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._rParenthese_ == child)
        {
            this._rParenthese_ = null;
            return;
        }

        if(this._ifstatement_ == child)
        {
            this._ifstatement_ = null;
            return;
        }

        if(this._else_ == child)
        {
            this._else_ = null;
            return;
        }

        if(this._elsestatement_ == child)
        {
            this._elsestatement_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._if_ == oldChild)
        {
            setIf((TIf) newChild);
            return;
        }

        if(this._lParenthese_ == oldChild)
        {
            setLParenthese((TLParenthese) newChild);
            return;
        }

        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._rParenthese_ == oldChild)
        {
            setRParenthese((TRParenthese) newChild);
            return;
        }

        if(this._ifstatement_ == oldChild)
        {
            setIfstatement((PStatement) newChild);
            return;
        }

        if(this._else_ == oldChild)
        {
            setElse((TElse) newChild);
            return;
        }

        if(this._elsestatement_ == oldChild)
        {
            setElsestatement((PStatement) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
