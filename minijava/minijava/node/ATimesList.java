/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import java.util.*;
import analysis.*;

@SuppressWarnings("nls")
public final class ATimesList extends PTimesList
{
    private PPrefixexp _prefixexp_;
    private final LinkedList<PTimesRest> _timesRest_ = new LinkedList<PTimesRest>();

    public ATimesList()
    {
        // Constructor
    }

    public ATimesList(
        @SuppressWarnings("hiding") PPrefixexp _prefixexp_,
        @SuppressWarnings("hiding") List<PTimesRest> _timesRest_)
    {
        // Constructor
        setPrefixexp(_prefixexp_);

        setTimesRest(_timesRest_);

    }

    @Override
    public Object clone()
    {
        return new ATimesList(
            cloneNode(this._prefixexp_),
            cloneList(this._timesRest_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATimesList(this);
    }

    public PPrefixexp getPrefixexp()
    {
        return this._prefixexp_;
    }

    public void setPrefixexp(PPrefixexp node)
    {
        if(this._prefixexp_ != null)
        {
            this._prefixexp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._prefixexp_ = node;
    }

    public LinkedList<PTimesRest> getTimesRest()
    {
        return this._timesRest_;
    }

    public void setTimesRest(List<PTimesRest> list)
    {
        this._timesRest_.clear();
        this._timesRest_.addAll(list);
        for(PTimesRest e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._prefixexp_)
            + toString(this._timesRest_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._prefixexp_ == child)
        {
            this._prefixexp_ = null;
            return;
        }

        if(this._timesRest_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._prefixexp_ == oldChild)
        {
            setPrefixexp((PPrefixexp) newChild);
            return;
        }

        for(ListIterator<PTimesRest> i = this._timesRest_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PTimesRest) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
