/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.node;

import minijava.analysis.Analysis;

@SuppressWarnings("nls")
public final class AAndstmRest extends PAndstmRest
{
    private TAnd _and_;
    private PLessThan _lessThan_;

    public AAndstmRest()
    {
        // Constructor
    }

    public AAndstmRest(
        @SuppressWarnings("hiding") TAnd _and_,
        @SuppressWarnings("hiding") PLessThan _lessThan_)
    {
        // Constructor
        setAnd(_and_);

        setLessThan(_lessThan_);

    }

    @Override
    public Object clone()
    {
        return new AAndstmRest(
            cloneNode(this._and_),
            cloneNode(this._lessThan_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAndstmRest(this);
    }

    public TAnd getAnd()
    {
        return this._and_;
    }

    public void setAnd(TAnd node)
    {
        if(this._and_ != null)
        {
            this._and_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._and_ = node;
    }

    public PLessThan getLessThan()
    {
        return this._lessThan_;
    }

    public void setLessThan(PLessThan node)
    {
        if(this._lessThan_ != null)
        {
            this._lessThan_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lessThan_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._and_)
            + toString(this._lessThan_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._and_ == child)
        {
            this._and_ = null;
            return;
        }

        if(this._lessThan_ == child)
        {
            this._lessThan_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._and_ == oldChild)
        {
            setAnd((TAnd) newChild);
            return;
        }

        if(this._lessThan_ == oldChild)
        {
            setLessThan((PLessThan) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
