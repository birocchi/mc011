/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import java.util.*;
import analysis.*;

@SuppressWarnings("nls")
public final class ANotexp extends PNotexp
{
    private final LinkedList<TNot> _not_ = new LinkedList<TNot>();
    private PPostfixexpList _postfixexpList_;

    public ANotexp()
    {
        // Constructor
    }

    public ANotexp(
        @SuppressWarnings("hiding") List<TNot> _not_,
        @SuppressWarnings("hiding") PPostfixexpList _postfixexpList_)
    {
        // Constructor
        setNot(_not_);

        setPostfixexpList(_postfixexpList_);

    }

    @Override
    public Object clone()
    {
        return new ANotexp(
            cloneList(this._not_),
            cloneNode(this._postfixexpList_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANotexp(this);
    }

    public LinkedList<TNot> getNot()
    {
        return this._not_;
    }

    public void setNot(List<TNot> list)
    {
        this._not_.clear();
        this._not_.addAll(list);
        for(TNot e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public PPostfixexpList getPostfixexpList()
    {
        return this._postfixexpList_;
    }

    public void setPostfixexpList(PPostfixexpList node)
    {
        if(this._postfixexpList_ != null)
        {
            this._postfixexpList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._postfixexpList_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._not_)
            + toString(this._postfixexpList_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._not_.remove(child))
        {
            return;
        }

        if(this._postfixexpList_ == child)
        {
            this._postfixexpList_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<TNot> i = this._not_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TNot) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._postfixexpList_ == oldChild)
        {
            setPostfixexpList((PPostfixexpList) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
