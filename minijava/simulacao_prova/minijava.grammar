Helpers
letter = [['a' .. 'z'] + ['A' .. 'Z']];
digit = ['0' .. '9'];
all = [1 .. 127];
all_but_newline = [all - 10];
not_star = [all - '*'];
not_star_slash = [not_star - '/'];

Tokens 
classn = 'class';
extends = 'extends';
public = 'public';
static = 'static';
void = 'void';
main = 'main';
string = 'String';
int = 'int';
boolean = 'boolean';
if = 'if';
else = 'else';
while = 'while';
length = 'length' ;
new = 'new';
true = 'true';
false = 'false';
return = 'return';
this = 'this';

id = letter (letter | digit | '_')*;
number = digit (digit)*;

plusop = '+';
minusop = '-';
timesop = '*';
and = '&&';
less = '<';
op = '&&' | '<' | '+' | '-' | '*';

equal = '=';
not = '!';
l_bracket = '[';
r_bracket = ']';
l_brace = '{';
r_brace = '}';
l_parenthese = '(';
r_parenthese = ')';
dot = '.';
semicolon = ';';
comma = ',' ;

blank = (' ' | 10 | 13 | 9)*;

print = 'System.out.println';

comment = '//' all_but_newline* 10 
       |  '/*' not_star* '*'+ (not_star_slash not_star* '*'+)* '/';

Ignored Tokens
comment,
blank;

Productions
program = 
     mainclass classdecl*;

mainclass {-> mainclass} = 
     classn [classname]:id l_brace [mainmethod]:mainmethod r_brace 
     {-> New mainclass(classname, mainmethod.mainmethod)};

mainmethod {-> mainmethod} =
     public static void main l_parenthese string l_bracket r_bracket [paramname]:id r_parenthese l_brace 
        [statements]:statement 
     r_brace 
     {-> New mainmethod(paramname, statements.statement)}; 

classdecl {-> classdecl} = 
     {simpleclass} classn [classname]:id 
                   l_brace 
                       [vars]:vardecl* 
                       [methods]:methoddecl*
                   r_brace
     {-> New classdecl(classname, Null, [vars.vardecl], [methods.methoddecl])}
   | {extendingclass} classn [classname]:id extends [super]:id 
                      l_brace
                          [vars]:vardecl* 
                          [methods]:methoddecl*
		      r_brace 
     {-> New classdecl(classname, super, [vars.vardecl], [methods.methoddecl])};
 
vardecl {-> vardecl} = 
    type [varname]:id semicolon {-> New vardecl(type.type, varname)};

methoddecl {-> methoddecl} =
    public type [methodname]:id l_parenthese [parameters]:paramlist r_parenthese 
        l_brace
	     [vars]:vardecl* 
	     [statements]:statement* 
	     return [returnexpression]:exp semicolon 
        r_brace
    {-> New methoddecl(type, methodname, [parameters.parameter], [vars.vardecl], [statements.statement], returnexpression.exp)};

paramlist {-> parameter*} = 
      {firstparameter} parameter paramrest* {-> [parameter, paramrest.parameter]}
    | {empty} {-> []};

paramrest {-> parameter} =
    {anotherparameter} comma type id {-> New parameter(type, id)};

parameter {-> parameter} = 
    type id {-> New parameter(type.type, id)};

type {-> type} = 
      {intvector} int l_bracket r_bracket {-> New type.intvector()}
    | {boolean} boolean {-> New type.boolean()}
    | {int} int {-> New type.int()}
    | {id} id {-> New type.id(id)};

statement {-> statement} =
      {statementlist} l_brace [statementlist]:statement* r_brace 
      {-> New statement.statementlist([statementlist.statement])}
    | {ifelse} if l_parenthese [ifexp]:exp r_parenthese 
      	       	  [ifstatement]:statement 
	       else 
	       	  [elsestatement]:statement 
      {-> New statement.ifelse(ifexp.exp, ifstatement, elsestatement)}
    | {while} while l_parenthese [whileexp]:exp r_parenthese statement 
      {-> New statement.while(whileexp.exp, statement)}
    | {print} print l_parenthese exp r_parenthese semicolon
      {-> New statement.print(exp)}
    | {attr} id equal exp semicolon
      {-> New statement.attr(id, exp)} 
    | {arrayattr} id l_bracket [arrayindex]:exp r_bracket equal [righthandside]:exp semicolon
      {-> New statement.arrayattr(id, arrayindex.exp, righthandside.exp)};

exp {-> exp} = 
        {and} andstm_list {-> New exp.and([andstm_list.exp])};

andstm_list {-> exp*} =
    less_than andstm_rest* {-> [less_than.exp, andstm_rest.exp]};

andstm_rest {-> exp*} =
    and less_than {-> [less_than.exp]} ;

less_than {-> exp} = 
    plus_minus_list less_than_plus_minus? {-> New exp.less([plus_minus_list.exp, less_than_plus_minus.exp])};

less_than_plus_minus {-> exp} = 
    less plus_minus_list {-> plus_minus_list.exp};

plus_minus_list {-> exp} = 
      {plus_list} plus_list {-> plus_list.exp}
    | {minus_list} minus_list {-> minus_list.exp};

plus_list {-> exp} = 
    times_list plus_rest* {-> New exp.add([times_list.exp, plus_rest.exp])};

plus_rest {-> exp} = 
    plusop times_list {-> times_list.exp};

minus_list {-> exp} = 
    times_list minus_rest* {-> New exp.sub([times_list.exp, minus_rest.exp])};

minus_rest {-> exp} = 
    minusop times_list {-> times_list.exp};

times_list {-> exp} =
    prefixexp times_rest* {-> New exp.mul([prefixexp.exp, times_rest.exp])}; 

times_rest {-> exp} =
    timesop prefixexp {-> prefixexp.exp};

prefixexp {-> exp} =
      {not_expression} notexp {-> notexp.exp}
    | {expression} postfixexp_list {-> postfixexp_list.exp};

notexp {-> exp} = 
    not postfixexp_list {-> New exp.notexp(postfixexp_list.exp)};

postfixexp_list {-> exp} = 
    primary_exp postfixexp_rest* {-> New exp.prepos(primary_exp.exp, [postfixexp_rest.exp])};

postfixexp_rest {-> exp} = 
      {index} l_bracket exp r_bracket {-> New exp.arrayget(exp.exp)}
    | {methodcall} dot id l_parenthese explist r_parenthese {-> New exp.methodcall(id, [explist.exp])}
    | {length} dot length {-> New exp.length()};

primary_exp {-> exp} = 
      {number} number {-> New exp.number(number)}
    | {true} true {-> New exp.true()}
    | {false} false {-> New exp.false()}
    | {id} id {-> New exp.id(id)}
    | {this} this {-> New exp.this()}
    | {newintarray} new int l_bracket exp r_bracket {-> New exp.newintarray(exp)}
    | {newid} new id l_parenthese r_parenthese {-> New exp.newid(id)}
    | {lparexprpar} l_parenthese exp r_parenthese {-> New exp.lparexprpar(exp)};

explist {-> exp*} = 
      {explisthead} exp exprest* {-> [exp, exprest.exp]}
    | {blank} {-> []};

exprest {-> exp} = 
    comma exp {-> exp};

Abstract Syntax Tree
program = 
     mainclass classdecl*;	
mainclass = 
     [classname]:id [mainmethod]:mainmethod;

mainmethod =
     [paramname]:id [statements]:statement;

classdecl = 
     [classname]:id [super]:id? [vars]:vardecl* [methods]:methoddecl*;
 
vardecl = 
    type [varname]:id;

methoddecl =
    type [methodname]:id [parameters]:parameter*
         [vars]:vardecl*
 	 [statements]:statement* 
	 [returnexpression]:exp;

parameter = 
    type id;

type =
      {intvector} 
    | {boolean} 
    | {int} 
    | {id} id ;

statement =
    {statementlist} [statementlist]:statement*
  | {ifelse} [ifexp]:exp [ifstatement]:statement [elsestatement]:statement
  | {while} [whileexp]:exp [statement]:statement
  | {print} [exp]:exp
  | {attr} [id]:id [exp]:exp
  | {arrayattr} [id]:id [arrayindex]:exp [righthandside]:exp;

exp =
      {and} [andexps]:exp*
    | {less} [exps]:exp*
    | {mul} [factor]:exp*
    | {add} [terms]:exp*
    | {sub} [terms]:exp*
    | {arrayget} [index]:exp 
    | {length}
    | {methodcall} [id]:id [explist]:exp*
    | {number} [number]:number
    | {true}
    | {false}
    | {id} [id]:id
    | {this} 
    | {newintarray} [exp]:exp
    | {newid} [id]:id
    | {notexp} [exp]:exp
    | {lparexprpar} [exp]:exp
    | {prepos} [prefix]:exp [posfixs]:exp*;
