/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AIndexExp extends PExp
{
    private PExp _pointer_;
    private PExp _offset_;

    public AIndexExp()
    {
        // Constructor
    }

    public AIndexExp(
        @SuppressWarnings("hiding") PExp _pointer_,
        @SuppressWarnings("hiding") PExp _offset_)
    {
        // Constructor
        setPointer(_pointer_);

        setOffset(_offset_);

    }

    @Override
    public Object clone()
    {
        return new AIndexExp(
            cloneNode(this._pointer_),
            cloneNode(this._offset_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIndexExp(this);
    }

    public PExp getPointer()
    {
        return this._pointer_;
    }

    public void setPointer(PExp node)
    {
        if(this._pointer_ != null)
        {
            this._pointer_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pointer_ = node;
    }

    public PExp getOffset()
    {
        return this._offset_;
    }

    public void setOffset(PExp node)
    {
        if(this._offset_ != null)
        {
            this._offset_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._offset_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._pointer_)
            + toString(this._offset_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._pointer_ == child)
        {
            this._pointer_ = null;
            return;
        }

        if(this._offset_ == child)
        {
            this._offset_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._pointer_ == oldChild)
        {
            setPointer((PExp) newChild);
            return;
        }

        if(this._offset_ == oldChild)
        {
            setOffset((PExp) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
