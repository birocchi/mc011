/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AMainmethod extends PMainmethod
{
    private TId _paramname_;
    private PStatement _statements_;

    public AMainmethod()
    {
        // Constructor
    }

    public AMainmethod(
        @SuppressWarnings("hiding") TId _paramname_,
        @SuppressWarnings("hiding") PStatement _statements_)
    {
        // Constructor
        setParamname(_paramname_);

        setStatements(_statements_);

    }

    @Override
    public Object clone()
    {
        return new AMainmethod(
            cloneNode(this._paramname_),
            cloneNode(this._statements_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMainmethod(this);
    }

    public TId getParamname()
    {
        return this._paramname_;
    }

    public void setParamname(TId node)
    {
        if(this._paramname_ != null)
        {
            this._paramname_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._paramname_ = node;
    }

    public PStatement getStatements()
    {
        return this._statements_;
    }

    public void setStatements(PStatement node)
    {
        if(this._statements_ != null)
        {
            this._statements_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statements_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._paramname_)
            + toString(this._statements_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._paramname_ == child)
        {
            this._paramname_ = null;
            return;
        }

        if(this._statements_ == child)
        {
            this._statements_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._paramname_ == oldChild)
        {
            setParamname((TId) newChild);
            return;
        }

        if(this._statements_ == oldChild)
        {
            setStatements((PStatement) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
