/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import java.util.*;
import analysis.*;

@SuppressWarnings("nls")
public final class AMethoddecl extends PMethoddecl
{
    private PType _type_;
    private TId _methodname_;
    private final LinkedList<PParameter> _parameters_ = new LinkedList<PParameter>();
    private final LinkedList<PVardecl> _vars_ = new LinkedList<PVardecl>();
    private final LinkedList<PStatement> _statements_ = new LinkedList<PStatement>();
    private PExp _returnexpression_;

    public AMethoddecl()
    {
        // Constructor
    }

    public AMethoddecl(
        @SuppressWarnings("hiding") PType _type_,
        @SuppressWarnings("hiding") TId _methodname_,
        @SuppressWarnings("hiding") List<PParameter> _parameters_,
        @SuppressWarnings("hiding") List<PVardecl> _vars_,
        @SuppressWarnings("hiding") List<PStatement> _statements_,
        @SuppressWarnings("hiding") PExp _returnexpression_)
    {
        // Constructor
        setType(_type_);

        setMethodname(_methodname_);

        setParameters(_parameters_);

        setVars(_vars_);

        setStatements(_statements_);

        setReturnexpression(_returnexpression_);

    }

    @Override
    public Object clone()
    {
        return new AMethoddecl(
            cloneNode(this._type_),
            cloneNode(this._methodname_),
            cloneList(this._parameters_),
            cloneList(this._vars_),
            cloneList(this._statements_),
            cloneNode(this._returnexpression_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMethoddecl(this);
    }

    public PType getType()
    {
        return this._type_;
    }

    public void setType(PType node)
    {
        if(this._type_ != null)
        {
            this._type_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._type_ = node;
    }

    public TId getMethodname()
    {
        return this._methodname_;
    }

    public void setMethodname(TId node)
    {
        if(this._methodname_ != null)
        {
            this._methodname_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._methodname_ = node;
    }

    public LinkedList<PParameter> getParameters()
    {
        return this._parameters_;
    }

    public void setParameters(List<PParameter> list)
    {
        this._parameters_.clear();
        this._parameters_.addAll(list);
        for(PParameter e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PVardecl> getVars()
    {
        return this._vars_;
    }

    public void setVars(List<PVardecl> list)
    {
        this._vars_.clear();
        this._vars_.addAll(list);
        for(PVardecl e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PStatement> getStatements()
    {
        return this._statements_;
    }

    public void setStatements(List<PStatement> list)
    {
        this._statements_.clear();
        this._statements_.addAll(list);
        for(PStatement e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public PExp getReturnexpression()
    {
        return this._returnexpression_;
    }

    public void setReturnexpression(PExp node)
    {
        if(this._returnexpression_ != null)
        {
            this._returnexpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._returnexpression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._type_)
            + toString(this._methodname_)
            + toString(this._parameters_)
            + toString(this._vars_)
            + toString(this._statements_)
            + toString(this._returnexpression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._type_ == child)
        {
            this._type_ = null;
            return;
        }

        if(this._methodname_ == child)
        {
            this._methodname_ = null;
            return;
        }

        if(this._parameters_.remove(child))
        {
            return;
        }

        if(this._vars_.remove(child))
        {
            return;
        }

        if(this._statements_.remove(child))
        {
            return;
        }

        if(this._returnexpression_ == child)
        {
            this._returnexpression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._type_ == oldChild)
        {
            setType((PType) newChild);
            return;
        }

        if(this._methodname_ == oldChild)
        {
            setMethodname((TId) newChild);
            return;
        }

        for(ListIterator<PParameter> i = this._parameters_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PParameter) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PVardecl> i = this._vars_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PVardecl) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PStatement> i = this._statements_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PStatement) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._returnexpression_ == oldChild)
        {
            setReturnexpression((PExp) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
