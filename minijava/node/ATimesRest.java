/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class ATimesRest extends PTimesRest
{
    private TTimesop _timesop_;
    private PPrefixexp _prefixexp_;

    public ATimesRest()
    {
        // Constructor
    }

    public ATimesRest(
        @SuppressWarnings("hiding") TTimesop _timesop_,
        @SuppressWarnings("hiding") PPrefixexp _prefixexp_)
    {
        // Constructor
        setTimesop(_timesop_);

        setPrefixexp(_prefixexp_);

    }

    @Override
    public Object clone()
    {
        return new ATimesRest(
            cloneNode(this._timesop_),
            cloneNode(this._prefixexp_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATimesRest(this);
    }

    public TTimesop getTimesop()
    {
        return this._timesop_;
    }

    public void setTimesop(TTimesop node)
    {
        if(this._timesop_ != null)
        {
            this._timesop_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._timesop_ = node;
    }

    public PPrefixexp getPrefixexp()
    {
        return this._prefixexp_;
    }

    public void setPrefixexp(PPrefixexp node)
    {
        if(this._prefixexp_ != null)
        {
            this._prefixexp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._prefixexp_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._timesop_)
            + toString(this._prefixexp_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._timesop_ == child)
        {
            this._timesop_ = null;
            return;
        }

        if(this._prefixexp_ == child)
        {
            this._prefixexp_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._timesop_ == oldChild)
        {
            setTimesop((TTimesop) newChild);
            return;
        }

        if(this._prefixexp_ == oldChild)
        {
            setPrefixexp((PPrefixexp) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
