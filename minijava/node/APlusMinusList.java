/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import java.util.*;
import analysis.*;

@SuppressWarnings("nls")
public final class APlusMinusList extends PPlusMinusList
{
    private PTimesList _timesList_;
    private final LinkedList<PPlusMinusRest> _plusMinusRest_ = new LinkedList<PPlusMinusRest>();

    public APlusMinusList()
    {
        // Constructor
    }

    public APlusMinusList(
        @SuppressWarnings("hiding") PTimesList _timesList_,
        @SuppressWarnings("hiding") List<PPlusMinusRest> _plusMinusRest_)
    {
        // Constructor
        setTimesList(_timesList_);

        setPlusMinusRest(_plusMinusRest_);

    }

    @Override
    public Object clone()
    {
        return new APlusMinusList(
            cloneNode(this._timesList_),
            cloneList(this._plusMinusRest_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPlusMinusList(this);
    }

    public PTimesList getTimesList()
    {
        return this._timesList_;
    }

    public void setTimesList(PTimesList node)
    {
        if(this._timesList_ != null)
        {
            this._timesList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._timesList_ = node;
    }

    public LinkedList<PPlusMinusRest> getPlusMinusRest()
    {
        return this._plusMinusRest_;
    }

    public void setPlusMinusRest(List<PPlusMinusRest> list)
    {
        this._plusMinusRest_.clear();
        this._plusMinusRest_.addAll(list);
        for(PPlusMinusRest e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._timesList_)
            + toString(this._plusMinusRest_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._timesList_ == child)
        {
            this._timesList_ = null;
            return;
        }

        if(this._plusMinusRest_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._timesList_ == oldChild)
        {
            setTimesList((PTimesList) newChild);
            return;
        }

        for(ListIterator<PPlusMinusRest> i = this._plusMinusRest_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PPlusMinusRest) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
