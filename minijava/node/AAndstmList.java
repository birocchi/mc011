/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import java.util.*;
import analysis.*;

@SuppressWarnings("nls")
public final class AAndstmList extends PAndstmList
{
    private PLessThan _lessThan_;
    private final LinkedList<PAndstmRest> _andstmRest_ = new LinkedList<PAndstmRest>();

    public AAndstmList()
    {
        // Constructor
    }

    public AAndstmList(
        @SuppressWarnings("hiding") PLessThan _lessThan_,
        @SuppressWarnings("hiding") List<PAndstmRest> _andstmRest_)
    {
        // Constructor
        setLessThan(_lessThan_);

        setAndstmRest(_andstmRest_);

    }

    @Override
    public Object clone()
    {
        return new AAndstmList(
            cloneNode(this._lessThan_),
            cloneList(this._andstmRest_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAndstmList(this);
    }

    public PLessThan getLessThan()
    {
        return this._lessThan_;
    }

    public void setLessThan(PLessThan node)
    {
        if(this._lessThan_ != null)
        {
            this._lessThan_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lessThan_ = node;
    }

    public LinkedList<PAndstmRest> getAndstmRest()
    {
        return this._andstmRest_;
    }

    public void setAndstmRest(List<PAndstmRest> list)
    {
        this._andstmRest_.clear();
        this._andstmRest_.addAll(list);
        for(PAndstmRest e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lessThan_)
            + toString(this._andstmRest_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lessThan_ == child)
        {
            this._lessThan_ = null;
            return;
        }

        if(this._andstmRest_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lessThan_ == oldChild)
        {
            setLessThan((PLessThan) newChild);
            return;
        }

        for(ListIterator<PAndstmRest> i = this._andstmRest_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAndstmRest) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
