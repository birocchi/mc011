/* This file was generated by SableCC (http://www.sablecc.org/). */

package parser;

import lexer.*;
import node.*;
import analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AAprogram1Program */
		    {
			ArrayList list = new0();
			push(goTo(0), list, false);
		    }
		    break;
                    case 1: /* reduce AAprogram2Program */
		    {
			ArrayList list = new1();
			push(goTo(0), list, false);
		    }
		    break;
                    case 2: /* reduce AMainclass */
		    {
			ArrayList list = new2();
			push(goTo(1), list, false);
		    }
		    break;
                    case 3: /* reduce AMainmethod */
		    {
			ArrayList list = new3();
			push(goTo(2), list, false);
		    }
		    break;
                    case 4: /* reduce AAsimpleclassclassdecl1Classdecl */
		    {
			ArrayList list = new4();
			push(goTo(3), list, false);
		    }
		    break;
                    case 5: /* reduce AAsimpleclassclassdecl2Classdecl */
		    {
			ArrayList list = new5();
			push(goTo(3), list, false);
		    }
		    break;
                    case 6: /* reduce AAsimpleclassclassdecl3Classdecl */
		    {
			ArrayList list = new6();
			push(goTo(3), list, false);
		    }
		    break;
                    case 7: /* reduce AAsimpleclassclassdecl4Classdecl */
		    {
			ArrayList list = new7();
			push(goTo(3), list, false);
		    }
		    break;
                    case 8: /* reduce AAextendingclassclassdecl1Classdecl */
		    {
			ArrayList list = new8();
			push(goTo(3), list, false);
		    }
		    break;
                    case 9: /* reduce AAextendingclassclassdecl2Classdecl */
		    {
			ArrayList list = new9();
			push(goTo(3), list, false);
		    }
		    break;
                    case 10: /* reduce AAextendingclassclassdecl3Classdecl */
		    {
			ArrayList list = new10();
			push(goTo(3), list, false);
		    }
		    break;
                    case 11: /* reduce AAextendingclassclassdecl4Classdecl */
		    {
			ArrayList list = new11();
			push(goTo(3), list, false);
		    }
		    break;
                    case 12: /* reduce AVardecl */
		    {
			ArrayList list = new12();
			push(goTo(4), list, false);
		    }
		    break;
                    case 13: /* reduce AAmethoddecl1Methoddecl */
		    {
			ArrayList list = new13();
			push(goTo(5), list, false);
		    }
		    break;
                    case 14: /* reduce AAmethoddecl2Methoddecl */
		    {
			ArrayList list = new14();
			push(goTo(5), list, false);
		    }
		    break;
                    case 15: /* reduce AAmethoddecl3Methoddecl */
		    {
			ArrayList list = new15();
			push(goTo(5), list, false);
		    }
		    break;
                    case 16: /* reduce AAmethoddecl4Methoddecl */
		    {
			ArrayList list = new16();
			push(goTo(5), list, false);
		    }
		    break;
                    case 17: /* reduce AAfirstparameterparamlist1Paramlist */
		    {
			ArrayList list = new17();
			push(goTo(6), list, false);
		    }
		    break;
                    case 18: /* reduce AAfirstparameterparamlist2Paramlist */
		    {
			ArrayList list = new18();
			push(goTo(6), list, false);
		    }
		    break;
                    case 19: /* reduce AEmptyParamlist */
		    {
			ArrayList list = new19();
			push(goTo(6), list, false);
		    }
		    break;
                    case 20: /* reduce AAnotherparameterParamrest */
		    {
			ArrayList list = new20();
			push(goTo(7), list, false);
		    }
		    break;
                    case 21: /* reduce AIntvectorType */
		    {
			ArrayList list = new21();
			push(goTo(8), list, false);
		    }
		    break;
                    case 22: /* reduce ABooleanType */
		    {
			ArrayList list = new22();
			push(goTo(8), list, false);
		    }
		    break;
                    case 23: /* reduce AIntType */
		    {
			ArrayList list = new23();
			push(goTo(8), list, false);
		    }
		    break;
                    case 24: /* reduce AIdType */
		    {
			ArrayList list = new24();
			push(goTo(8), list, false);
		    }
		    break;
                    case 25: /* reduce AAstatementsstatement1Statement */
		    {
			ArrayList list = new25();
			push(goTo(9), list, false);
		    }
		    break;
                    case 26: /* reduce AAstatementsstatement2Statement */
		    {
			ArrayList list = new26();
			push(goTo(9), list, false);
		    }
		    break;
                    case 27: /* reduce AIfelseStatement */
		    {
			ArrayList list = new27();
			push(goTo(9), list, false);
		    }
		    break;
                    case 28: /* reduce AWhileStatement */
		    {
			ArrayList list = new28();
			push(goTo(9), list, false);
		    }
		    break;
                    case 29: /* reduce APrintStatement */
		    {
			ArrayList list = new29();
			push(goTo(9), list, false);
		    }
		    break;
                    case 30: /* reduce AAttrStatement */
		    {
			ArrayList list = new30();
			push(goTo(9), list, false);
		    }
		    break;
                    case 31: /* reduce AArrayattrStatement */
		    {
			ArrayList list = new31();
			push(goTo(9), list, false);
		    }
		    break;
                    case 32: /* reduce AExp */
		    {
			ArrayList list = new32();
			push(goTo(10), list, false);
		    }
		    break;
                    case 33: /* reduce AAandstmlist1AndstmList */
		    {
			ArrayList list = new33();
			push(goTo(11), list, false);
		    }
		    break;
                    case 34: /* reduce AAandstmlist2AndstmList */
		    {
			ArrayList list = new34();
			push(goTo(11), list, false);
		    }
		    break;
                    case 35: /* reduce AAndstmRest */
		    {
			ArrayList list = new35();
			push(goTo(12), list, false);
		    }
		    break;
                    case 36: /* reduce AAlessthan1LessThan */
		    {
			ArrayList list = new36();
			push(goTo(13), list, false);
		    }
		    break;
                    case 37: /* reduce AAlessthan2LessThan */
		    {
			ArrayList list = new37();
			push(goTo(13), list, false);
		    }
		    break;
                    case 38: /* reduce ALessThanPlusMinus */
		    {
			ArrayList list = new38();
			push(goTo(14), list, false);
		    }
		    break;
                    case 39: /* reduce AAplusminuslist1PlusMinusList */
		    {
			ArrayList list = new39();
			push(goTo(15), list, false);
		    }
		    break;
                    case 40: /* reduce AAplusminuslist2PlusMinusList */
		    {
			ArrayList list = new40();
			push(goTo(15), list, false);
		    }
		    break;
                    case 41: /* reduce APlusMinusRest */
		    {
			ArrayList list = new41();
			push(goTo(16), list, false);
		    }
		    break;
                    case 42: /* reduce AAtimeslist1TimesList */
		    {
			ArrayList list = new42();
			push(goTo(17), list, false);
		    }
		    break;
                    case 43: /* reduce AAtimeslist2TimesList */
		    {
			ArrayList list = new43();
			push(goTo(17), list, false);
		    }
		    break;
                    case 44: /* reduce ATimesRest */
		    {
			ArrayList list = new44();
			push(goTo(18), list, false);
		    }
		    break;
                    case 45: /* reduce ANotExpressionPrefixexp */
		    {
			ArrayList list = new45();
			push(goTo(19), list, false);
		    }
		    break;
                    case 46: /* reduce AExpressionPrefixexp */
		    {
			ArrayList list = new46();
			push(goTo(19), list, false);
		    }
		    break;
                    case 47: /* reduce ANotexp */
		    {
			ArrayList list = new47();
			push(goTo(20), list, false);
		    }
		    break;
                    case 48: /* reduce AApostfixexplist1PostfixexpList */
		    {
			ArrayList list = new48();
			push(goTo(21), list, false);
		    }
		    break;
                    case 49: /* reduce AApostfixexplist2PostfixexpList */
		    {
			ArrayList list = new49();
			push(goTo(21), list, false);
		    }
		    break;
                    case 50: /* reduce AIndexPostfixexpRest */
		    {
			ArrayList list = new50();
			push(goTo(22), list, false);
		    }
		    break;
                    case 51: /* reduce AIdlistPostfixexpRest */
		    {
			ArrayList list = new51();
			push(goTo(22), list, false);
		    }
		    break;
                    case 52: /* reduce ALengthPostfixexpRest */
		    {
			ArrayList list = new52();
			push(goTo(22), list, false);
		    }
		    break;
                    case 53: /* reduce ANumberPrimaryExp */
		    {
			ArrayList list = new53();
			push(goTo(23), list, false);
		    }
		    break;
                    case 54: /* reduce ATruePrimaryExp */
		    {
			ArrayList list = new54();
			push(goTo(23), list, false);
		    }
		    break;
                    case 55: /* reduce AFalsePrimaryExp */
		    {
			ArrayList list = new55();
			push(goTo(23), list, false);
		    }
		    break;
                    case 56: /* reduce AIdPrimaryExp */
		    {
			ArrayList list = new56();
			push(goTo(23), list, false);
		    }
		    break;
                    case 57: /* reduce AThisPrimaryExp */
		    {
			ArrayList list = new57();
			push(goTo(23), list, false);
		    }
		    break;
                    case 58: /* reduce ANewintPrimaryExp */
		    {
			ArrayList list = new58();
			push(goTo(23), list, false);
		    }
		    break;
                    case 59: /* reduce ANewidPrimaryExp */
		    {
			ArrayList list = new59();
			push(goTo(23), list, false);
		    }
		    break;
                    case 60: /* reduce ALparexprparPrimaryExp */
		    {
			ArrayList list = new60();
			push(goTo(23), list, false);
		    }
		    break;
                    case 61: /* reduce AAexplistheadexplist1Explist */
		    {
			ArrayList list = new61();
			push(goTo(24), list, false);
		    }
		    break;
                    case 62: /* reduce AAexplistheadexplist2Explist */
		    {
			ArrayList list = new62();
			push(goTo(24), list, false);
		    }
		    break;
                    case 63: /* reduce ABlankExplist */
		    {
			ArrayList list = new63();
			push(goTo(24), list, false);
		    }
		    break;
                    case 64: /* reduce AExprest */
		    {
			ArrayList list = new64();
			push(goTo(25), list, false);
		    }
		    break;
                    case 65: /* reduce ATerminal$Classdecl */
		    {
			ArrayList list = new65();
			push(goTo(26), list, true);
		    }
		    break;
                    case 66: /* reduce ANonTerminal$Classdecl */
		    {
			ArrayList list = new66();
			push(goTo(26), list, true);
		    }
		    break;
                    case 67: /* reduce ATerminal$Vardecl */
		    {
			ArrayList list = new67();
			push(goTo(27), list, true);
		    }
		    break;
                    case 68: /* reduce ANonTerminal$Vardecl */
		    {
			ArrayList list = new68();
			push(goTo(27), list, true);
		    }
		    break;
                    case 69: /* reduce ATerminal$Methoddecl */
		    {
			ArrayList list = new69();
			push(goTo(28), list, true);
		    }
		    break;
                    case 70: /* reduce ANonTerminal$Methoddecl */
		    {
			ArrayList list = new70();
			push(goTo(28), list, true);
		    }
		    break;
                    case 71: /* reduce ATerminal$Statement */
		    {
			ArrayList list = new71();
			push(goTo(29), list, true);
		    }
		    break;
                    case 72: /* reduce ANonTerminal$Statement */
		    {
			ArrayList list = new72();
			push(goTo(29), list, true);
		    }
		    break;
                    case 73: /* reduce ATerminal$Paramrest */
		    {
			ArrayList list = new73();
			push(goTo(30), list, true);
		    }
		    break;
                    case 74: /* reduce ANonTerminal$Paramrest */
		    {
			ArrayList list = new74();
			push(goTo(30), list, true);
		    }
		    break;
                    case 75: /* reduce ATerminal$AndstmRest */
		    {
			ArrayList list = new75();
			push(goTo(31), list, true);
		    }
		    break;
                    case 76: /* reduce ANonTerminal$AndstmRest */
		    {
			ArrayList list = new76();
			push(goTo(31), list, true);
		    }
		    break;
                    case 77: /* reduce ATerminal$PlusMinusRest */
		    {
			ArrayList list = new77();
			push(goTo(32), list, true);
		    }
		    break;
                    case 78: /* reduce ANonTerminal$PlusMinusRest */
		    {
			ArrayList list = new78();
			push(goTo(32), list, true);
		    }
		    break;
                    case 79: /* reduce ATerminal$TimesRest */
		    {
			ArrayList list = new79();
			push(goTo(33), list, true);
		    }
		    break;
                    case 80: /* reduce ANonTerminal$TimesRest */
		    {
			ArrayList list = new80();
			push(goTo(33), list, true);
		    }
		    break;
                    case 81: /* reduce ATerminal$Not */
		    {
			ArrayList list = new81();
			push(goTo(34), list, true);
		    }
		    break;
                    case 82: /* reduce ANonTerminal$Not */
		    {
			ArrayList list = new82();
			push(goTo(34), list, true);
		    }
		    break;
                    case 83: /* reduce ATerminal$PostfixexpRest */
		    {
			ArrayList list = new83();
			push(goTo(35), list, true);
		    }
		    break;
                    case 84: /* reduce ANonTerminal$PostfixexpRest */
		    {
			ArrayList list = new84();
			push(goTo(35), list, true);
		    }
		    break;
                    case 85: /* reduce ATerminal$Exprest */
		    {
			ArrayList list = new85();
			push(goTo(36), list, true);
		    }
		    break;
                    case 86: /* reduce ANonTerminal$Exprest */
		    {
			ArrayList list = new86();
			push(goTo(36), list, true);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AAprogram1Program */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PMainclass pmainclassNode2;
        LinkedList listNode3 = new LinkedList();
        pmainclassNode2 = (PMainclass)nodeArrayList1.get(0);
        {
            // Block
        }

        pprogramNode1 = new AProgram(pmainclassNode2, listNode3);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AAprogram2Program */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PMainclass pmainclassNode2;
        LinkedList listNode4 = new LinkedList();
        pmainclassNode2 = (PMainclass)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pprogramNode1 = new AProgram(pmainclassNode2, listNode4);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AMainclass */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMainclass pmainclassNode1;
        {
            // Block
        TClassn tclassnNode2;
        TId tidNode3;
        TLBrace tlbraceNode4;
        PMainmethod pmainmethodNode5;
        TRBrace trbraceNode6;
        tclassnNode2 = (TClassn)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlbraceNode4 = (TLBrace)nodeArrayList3.get(0);
        pmainmethodNode5 = (PMainmethod)nodeArrayList4.get(0);
        trbraceNode6 = (TRBrace)nodeArrayList5.get(0);

        pmainclassNode1 = new AMainclass(tclassnNode2, tidNode3, tlbraceNode4, pmainmethodNode5, trbraceNode6);
        }
	nodeList.add(pmainclassNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AMainmethod */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMainmethod pmainmethodNode1;
        {
            // Block
        TPublic tpublicNode2;
        TStatic tstaticNode3;
        TVoid tvoidNode4;
        TMain tmainNode5;
        TLParenthese tlparentheseNode6;
        TString tstringNode7;
        TLBracket tlbracketNode8;
        TRBracket trbracketNode9;
        TId tidNode10;
        TRParenthese trparentheseNode11;
        TLBrace tlbraceNode12;
        PStatement pstatementNode13;
        TRBrace trbraceNode14;
        tpublicNode2 = (TPublic)nodeArrayList1.get(0);
        tstaticNode3 = (TStatic)nodeArrayList2.get(0);
        tvoidNode4 = (TVoid)nodeArrayList3.get(0);
        tmainNode5 = (TMain)nodeArrayList4.get(0);
        tlparentheseNode6 = (TLParenthese)nodeArrayList5.get(0);
        tstringNode7 = (TString)nodeArrayList6.get(0);
        tlbracketNode8 = (TLBracket)nodeArrayList7.get(0);
        trbracketNode9 = (TRBracket)nodeArrayList8.get(0);
        tidNode10 = (TId)nodeArrayList9.get(0);
        trparentheseNode11 = (TRParenthese)nodeArrayList10.get(0);
        tlbraceNode12 = (TLBrace)nodeArrayList11.get(0);
        pstatementNode13 = (PStatement)nodeArrayList12.get(0);
        trbraceNode14 = (TRBrace)nodeArrayList13.get(0);

        pmainmethodNode1 = new AMainmethod(tpublicNode2, tstaticNode3, tvoidNode4, tmainNode5, tlparentheseNode6, tstringNode7, tlbracketNode8, trbracketNode9, tidNode10, trparentheseNode11, tlbraceNode12, pstatementNode13, trbraceNode14);
        }
	nodeList.add(pmainmethodNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AAsimpleclassclassdecl1Classdecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassdecl pclassdeclNode1;
        {
            // Block
        TClassn tclassnNode2;
        TId tidNode3;
        TLBrace tlbraceNode4;
        LinkedList listNode5 = new LinkedList();
        LinkedList listNode6 = new LinkedList();
        TRBrace trbraceNode7;
        tclassnNode2 = (TClassn)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlbraceNode4 = (TLBrace)nodeArrayList3.get(0);
        {
            // Block
        }
        {
            // Block
        }
        trbraceNode7 = (TRBrace)nodeArrayList4.get(0);

        pclassdeclNode1 = new ASimpleclassClassdecl(tclassnNode2, tidNode3, tlbraceNode4, listNode5, listNode6, trbraceNode7);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce AAsimpleclassclassdecl2Classdecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassdecl pclassdeclNode1;
        {
            // Block
        TClassn tclassnNode2;
        TId tidNode3;
        TLBrace tlbraceNode4;
        LinkedList listNode6 = new LinkedList();
        LinkedList listNode7 = new LinkedList();
        TRBrace trbraceNode8;
        tclassnNode2 = (TClassn)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlbraceNode4 = (TLBrace)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        }
        trbraceNode8 = (TRBrace)nodeArrayList5.get(0);

        pclassdeclNode1 = new ASimpleclassClassdecl(tclassnNode2, tidNode3, tlbraceNode4, listNode6, listNode7, trbraceNode8);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AAsimpleclassclassdecl3Classdecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassdecl pclassdeclNode1;
        {
            // Block
        TClassn tclassnNode2;
        TId tidNode3;
        TLBrace tlbraceNode4;
        LinkedList listNode5 = new LinkedList();
        LinkedList listNode7 = new LinkedList();
        TRBrace trbraceNode8;
        tclassnNode2 = (TClassn)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlbraceNode4 = (TLBrace)nodeArrayList3.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList listNode6 = new LinkedList();
        listNode6 = (LinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        trbraceNode8 = (TRBrace)nodeArrayList5.get(0);

        pclassdeclNode1 = new ASimpleclassClassdecl(tclassnNode2, tidNode3, tlbraceNode4, listNode5, listNode7, trbraceNode8);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AAsimpleclassclassdecl4Classdecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassdecl pclassdeclNode1;
        {
            // Block
        TClassn tclassnNode2;
        TId tidNode3;
        TLBrace tlbraceNode4;
        LinkedList listNode6 = new LinkedList();
        LinkedList listNode8 = new LinkedList();
        TRBrace trbraceNode9;
        tclassnNode2 = (TClassn)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlbraceNode4 = (TLBrace)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        LinkedList listNode7 = new LinkedList();
        listNode7 = (LinkedList)nodeArrayList5.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        trbraceNode9 = (TRBrace)nodeArrayList6.get(0);

        pclassdeclNode1 = new ASimpleclassClassdecl(tclassnNode2, tidNode3, tlbraceNode4, listNode6, listNode8, trbraceNode9);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce AAextendingclassclassdecl1Classdecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassdecl pclassdeclNode1;
        {
            // Block
        TClassn tclassnNode2;
        TId tidNode3;
        TExtends textendsNode4;
        TId tidNode5;
        TLBrace tlbraceNode6;
        LinkedList listNode7 = new LinkedList();
        LinkedList listNode8 = new LinkedList();
        TRBrace trbraceNode9;
        tclassnNode2 = (TClassn)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        textendsNode4 = (TExtends)nodeArrayList3.get(0);
        tidNode5 = (TId)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        }
        {
            // Block
        }
        trbraceNode9 = (TRBrace)nodeArrayList6.get(0);

        pclassdeclNode1 = new AExtendingclassClassdecl(tclassnNode2, tidNode3, textendsNode4, tidNode5, tlbraceNode6, listNode7, listNode8, trbraceNode9);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce AAextendingclassclassdecl2Classdecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassdecl pclassdeclNode1;
        {
            // Block
        TClassn tclassnNode2;
        TId tidNode3;
        TExtends textendsNode4;
        TId tidNode5;
        TLBrace tlbraceNode6;
        LinkedList listNode8 = new LinkedList();
        LinkedList listNode9 = new LinkedList();
        TRBrace trbraceNode10;
        tclassnNode2 = (TClassn)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        textendsNode4 = (TExtends)nodeArrayList3.get(0);
        tidNode5 = (TId)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        LinkedList listNode7 = new LinkedList();
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        {
            // Block
        }
        trbraceNode10 = (TRBrace)nodeArrayList7.get(0);

        pclassdeclNode1 = new AExtendingclassClassdecl(tclassnNode2, tidNode3, textendsNode4, tidNode5, tlbraceNode6, listNode8, listNode9, trbraceNode10);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AAextendingclassclassdecl3Classdecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassdecl pclassdeclNode1;
        {
            // Block
        TClassn tclassnNode2;
        TId tidNode3;
        TExtends textendsNode4;
        TId tidNode5;
        TLBrace tlbraceNode6;
        LinkedList listNode7 = new LinkedList();
        LinkedList listNode9 = new LinkedList();
        TRBrace trbraceNode10;
        tclassnNode2 = (TClassn)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        textendsNode4 = (TExtends)nodeArrayList3.get(0);
        tidNode5 = (TId)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList listNode8 = new LinkedList();
        listNode8 = (LinkedList)nodeArrayList6.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        trbraceNode10 = (TRBrace)nodeArrayList7.get(0);

        pclassdeclNode1 = new AExtendingclassClassdecl(tclassnNode2, tidNode3, textendsNode4, tidNode5, tlbraceNode6, listNode7, listNode9, trbraceNode10);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce AAextendingclassclassdecl4Classdecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassdecl pclassdeclNode1;
        {
            // Block
        TClassn tclassnNode2;
        TId tidNode3;
        TExtends textendsNode4;
        TId tidNode5;
        TLBrace tlbraceNode6;
        LinkedList listNode8 = new LinkedList();
        LinkedList listNode10 = new LinkedList();
        TRBrace trbraceNode11;
        tclassnNode2 = (TClassn)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        textendsNode4 = (TExtends)nodeArrayList3.get(0);
        tidNode5 = (TId)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        LinkedList listNode7 = new LinkedList();
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        {
            // Block
        LinkedList listNode9 = new LinkedList();
        listNode9 = (LinkedList)nodeArrayList7.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        trbraceNode11 = (TRBrace)nodeArrayList8.get(0);

        pclassdeclNode1 = new AExtendingclassClassdecl(tclassnNode2, tidNode3, textendsNode4, tidNode5, tlbraceNode6, listNode8, listNode10, trbraceNode11);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AVardecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVardecl pvardeclNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        TSemicolon tsemicolonNode4;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        pvardeclNode1 = new AVardecl(ptypeNode2, tidNode3, tsemicolonNode4);
        }
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AAmethoddecl1Methoddecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethoddecl pmethoddeclNode1;
        {
            // Block
        TPublic tpublicNode2;
        PType ptypeNode3;
        TId tidNode4;
        TLParenthese tlparentheseNode5;
        PParamlist pparamlistNode6;
        TRParenthese trparentheseNode7;
        TLBrace tlbraceNode8;
        LinkedList listNode9 = new LinkedList();
        LinkedList listNode10 = new LinkedList();
        TReturn treturnNode11;
        PExp pexpNode12;
        TSemicolon tsemicolonNode13;
        TRBrace trbraceNode14;
        tpublicNode2 = (TPublic)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        tlparentheseNode5 = (TLParenthese)nodeArrayList4.get(0);
        pparamlistNode6 = (PParamlist)nodeArrayList5.get(0);
        trparentheseNode7 = (TRParenthese)nodeArrayList6.get(0);
        tlbraceNode8 = (TLBrace)nodeArrayList7.get(0);
        {
            // Block
        }
        {
            // Block
        }
        treturnNode11 = (TReturn)nodeArrayList8.get(0);
        pexpNode12 = (PExp)nodeArrayList9.get(0);
        tsemicolonNode13 = (TSemicolon)nodeArrayList10.get(0);
        trbraceNode14 = (TRBrace)nodeArrayList11.get(0);

        pmethoddeclNode1 = new AMethoddecl(tpublicNode2, ptypeNode3, tidNode4, tlparentheseNode5, pparamlistNode6, trparentheseNode7, tlbraceNode8, listNode9, listNode10, treturnNode11, pexpNode12, tsemicolonNode13, trbraceNode14);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce AAmethoddecl2Methoddecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethoddecl pmethoddeclNode1;
        {
            // Block
        TPublic tpublicNode2;
        PType ptypeNode3;
        TId tidNode4;
        TLParenthese tlparentheseNode5;
        PParamlist pparamlistNode6;
        TRParenthese trparentheseNode7;
        TLBrace tlbraceNode8;
        LinkedList listNode10 = new LinkedList();
        LinkedList listNode11 = new LinkedList();
        TReturn treturnNode12;
        PExp pexpNode13;
        TSemicolon tsemicolonNode14;
        TRBrace trbraceNode15;
        tpublicNode2 = (TPublic)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        tlparentheseNode5 = (TLParenthese)nodeArrayList4.get(0);
        pparamlistNode6 = (PParamlist)nodeArrayList5.get(0);
        trparentheseNode7 = (TRParenthese)nodeArrayList6.get(0);
        tlbraceNode8 = (TLBrace)nodeArrayList7.get(0);
        {
            // Block
        LinkedList listNode9 = new LinkedList();
        listNode9 = (LinkedList)nodeArrayList8.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        {
            // Block
        }
        treturnNode12 = (TReturn)nodeArrayList9.get(0);
        pexpNode13 = (PExp)nodeArrayList10.get(0);
        tsemicolonNode14 = (TSemicolon)nodeArrayList11.get(0);
        trbraceNode15 = (TRBrace)nodeArrayList12.get(0);

        pmethoddeclNode1 = new AMethoddecl(tpublicNode2, ptypeNode3, tidNode4, tlparentheseNode5, pparamlistNode6, trparentheseNode7, tlbraceNode8, listNode10, listNode11, treturnNode12, pexpNode13, tsemicolonNode14, trbraceNode15);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce AAmethoddecl3Methoddecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethoddecl pmethoddeclNode1;
        {
            // Block
        TPublic tpublicNode2;
        PType ptypeNode3;
        TId tidNode4;
        TLParenthese tlparentheseNode5;
        PParamlist pparamlistNode6;
        TRParenthese trparentheseNode7;
        TLBrace tlbraceNode8;
        LinkedList listNode9 = new LinkedList();
        LinkedList listNode11 = new LinkedList();
        TReturn treturnNode12;
        PExp pexpNode13;
        TSemicolon tsemicolonNode14;
        TRBrace trbraceNode15;
        tpublicNode2 = (TPublic)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        tlparentheseNode5 = (TLParenthese)nodeArrayList4.get(0);
        pparamlistNode6 = (PParamlist)nodeArrayList5.get(0);
        trparentheseNode7 = (TRParenthese)nodeArrayList6.get(0);
        tlbraceNode8 = (TLBrace)nodeArrayList7.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList listNode10 = new LinkedList();
        listNode10 = (LinkedList)nodeArrayList8.get(0);
	if(listNode10 != null)
	{
	  listNode11.addAll(listNode10);
	}
        }
        treturnNode12 = (TReturn)nodeArrayList9.get(0);
        pexpNode13 = (PExp)nodeArrayList10.get(0);
        tsemicolonNode14 = (TSemicolon)nodeArrayList11.get(0);
        trbraceNode15 = (TRBrace)nodeArrayList12.get(0);

        pmethoddeclNode1 = new AMethoddecl(tpublicNode2, ptypeNode3, tidNode4, tlparentheseNode5, pparamlistNode6, trparentheseNode7, tlbraceNode8, listNode9, listNode11, treturnNode12, pexpNode13, tsemicolonNode14, trbraceNode15);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce AAmethoddecl4Methoddecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethoddecl pmethoddeclNode1;
        {
            // Block
        TPublic tpublicNode2;
        PType ptypeNode3;
        TId tidNode4;
        TLParenthese tlparentheseNode5;
        PParamlist pparamlistNode6;
        TRParenthese trparentheseNode7;
        TLBrace tlbraceNode8;
        LinkedList listNode10 = new LinkedList();
        LinkedList listNode12 = new LinkedList();
        TReturn treturnNode13;
        PExp pexpNode14;
        TSemicolon tsemicolonNode15;
        TRBrace trbraceNode16;
        tpublicNode2 = (TPublic)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        tlparentheseNode5 = (TLParenthese)nodeArrayList4.get(0);
        pparamlistNode6 = (PParamlist)nodeArrayList5.get(0);
        trparentheseNode7 = (TRParenthese)nodeArrayList6.get(0);
        tlbraceNode8 = (TLBrace)nodeArrayList7.get(0);
        {
            // Block
        LinkedList listNode9 = new LinkedList();
        listNode9 = (LinkedList)nodeArrayList8.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        {
            // Block
        LinkedList listNode11 = new LinkedList();
        listNode11 = (LinkedList)nodeArrayList9.get(0);
	if(listNode11 != null)
	{
	  listNode12.addAll(listNode11);
	}
        }
        treturnNode13 = (TReturn)nodeArrayList10.get(0);
        pexpNode14 = (PExp)nodeArrayList11.get(0);
        tsemicolonNode15 = (TSemicolon)nodeArrayList12.get(0);
        trbraceNode16 = (TRBrace)nodeArrayList13.get(0);

        pmethoddeclNode1 = new AMethoddecl(tpublicNode2, ptypeNode3, tidNode4, tlparentheseNode5, pparamlistNode6, trparentheseNode7, tlbraceNode8, listNode10, listNode12, treturnNode13, pexpNode14, tsemicolonNode15, trbraceNode16);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce AAfirstparameterparamlist1Paramlist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParamlist pparamlistNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        LinkedList listNode4 = new LinkedList();
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        {
            // Block
        }

        pparamlistNode1 = new AFirstparameterParamlist(ptypeNode2, tidNode3, listNode4);
        }
	nodeList.add(pparamlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce AAfirstparameterparamlist2Paramlist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParamlist pparamlistNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        LinkedList listNode5 = new LinkedList();
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pparamlistNode1 = new AFirstparameterParamlist(ptypeNode2, tidNode3, listNode5);
        }
	nodeList.add(pparamlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce AEmptyParamlist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParamlist pparamlistNode1;
        {
            // Block
        TBlank tblankNode2;
        tblankNode2 = (TBlank)nodeArrayList1.get(0);

        pparamlistNode1 = new AEmptyParamlist(tblankNode2);
        }
	nodeList.add(pparamlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce AAnotherparameterParamrest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParamrest pparamrestNode1;
        {
            // Block
        TComma tcommaNode2;
        PType ptypeNode3;
        TId tidNode4;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);

        pparamrestNode1 = new AAnotherparameterParamrest(tcommaNode2, ptypeNode3, tidNode4);
        }
	nodeList.add(pparamrestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce AIntvectorType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TInt tintNode2;
        TLBracket tlbracketNode3;
        TRBracket trbracketNode4;
        tintNode2 = (TInt)nodeArrayList1.get(0);
        tlbracketNode3 = (TLBracket)nodeArrayList2.get(0);
        trbracketNode4 = (TRBracket)nodeArrayList3.get(0);

        ptypeNode1 = new AIntvectorType(tintNode2, tlbracketNode3, trbracketNode4);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce ABooleanType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TBoolean tbooleanNode2;
        tbooleanNode2 = (TBoolean)nodeArrayList1.get(0);

        ptypeNode1 = new ABooleanType(tbooleanNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce AIntType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        ptypeNode1 = new AIntType(tintNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce AIdType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        ptypeNode1 = new AIdType(tidNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce AAstatementsstatement1Statement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TLBrace tlbraceNode2;
        LinkedList listNode3 = new LinkedList();
        TRBrace trbraceNode4;
        tlbraceNode2 = (TLBrace)nodeArrayList1.get(0);
        {
            // Block
        }
        trbraceNode4 = (TRBrace)nodeArrayList2.get(0);

        pstatementNode1 = new AStatementsStatement(tlbraceNode2, listNode3, trbraceNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce AAstatementsstatement2Statement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TLBrace tlbraceNode2;
        LinkedList listNode4 = new LinkedList();
        TRBrace trbraceNode5;
        tlbraceNode2 = (TLBrace)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        trbraceNode5 = (TRBrace)nodeArrayList3.get(0);

        pstatementNode1 = new AStatementsStatement(tlbraceNode2, listNode4, trbraceNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce AIfelseStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TIf tifNode2;
        TLParenthese tlparentheseNode3;
        PExp pexpNode4;
        TRParenthese trparentheseNode5;
        PStatement pstatementNode6;
        TElse telseNode7;
        PStatement pstatementNode8;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tlparentheseNode3 = (TLParenthese)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trparentheseNode5 = (TRParenthese)nodeArrayList4.get(0);
        pstatementNode6 = (PStatement)nodeArrayList5.get(0);
        telseNode7 = (TElse)nodeArrayList6.get(0);
        pstatementNode8 = (PStatement)nodeArrayList7.get(0);

        pstatementNode1 = new AIfelseStatement(tifNode2, tlparentheseNode3, pexpNode4, trparentheseNode5, pstatementNode6, telseNode7, pstatementNode8);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce AWhileStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TWhile twhileNode2;
        TLParenthese tlparentheseNode3;
        PExp pexpNode4;
        TRParenthese trparentheseNode5;
        PStatement pstatementNode6;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        tlparentheseNode3 = (TLParenthese)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trparentheseNode5 = (TRParenthese)nodeArrayList4.get(0);
        pstatementNode6 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new AWhileStatement(twhileNode2, tlparentheseNode3, pexpNode4, trparentheseNode5, pstatementNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce APrintStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TPrint tprintNode2;
        TLParenthese tlparentheseNode3;
        PExp pexpNode4;
        TRParenthese trparentheseNode5;
        TSemicolon tsemicolonNode6;
        tprintNode2 = (TPrint)nodeArrayList1.get(0);
        tlparentheseNode3 = (TLParenthese)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trparentheseNode5 = (TRParenthese)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pstatementNode1 = new APrintStatement(tprintNode2, tlparentheseNode3, pexpNode4, trparentheseNode5, tsemicolonNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce AAttrStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TId tidNode2;
        TEqual tequalNode3;
        PExp pexpNode4;
        TSemicolon tsemicolonNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tequalNode3 = (TEqual)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tsemicolonNode5 = (TSemicolon)nodeArrayList4.get(0);

        pstatementNode1 = new AAttrStatement(tidNode2, tequalNode3, pexpNode4, tsemicolonNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce AArrayattrStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TId tidNode2;
        TLBracket tlbracketNode3;
        PExp pexpNode4;
        TRBracket trbracketNode5;
        TEqual tequalNode6;
        PExp pexpNode7;
        TSemicolon tsemicolonNode8;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlbracketNode3 = (TLBracket)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trbracketNode5 = (TRBracket)nodeArrayList4.get(0);
        tequalNode6 = (TEqual)nodeArrayList5.get(0);
        pexpNode7 = (PExp)nodeArrayList6.get(0);
        tsemicolonNode8 = (TSemicolon)nodeArrayList7.get(0);

        pstatementNode1 = new AArrayattrStatement(tidNode2, tlbracketNode3, pexpNode4, trbracketNode5, tequalNode6, pexpNode7, tsemicolonNode8);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce AExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PAndstmList pandstmlistNode2;
        pandstmlistNode2 = (PAndstmList)nodeArrayList1.get(0);

        pexpNode1 = new AExp(pandstmlistNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce AAandstmlist1AndstmList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAndstmList pandstmlistNode1;
        {
            // Block
        PLessThan plessthanNode2;
        LinkedList listNode3 = new LinkedList();
        plessthanNode2 = (PLessThan)nodeArrayList1.get(0);
        {
            // Block
        }

        pandstmlistNode1 = new AAndstmList(plessthanNode2, listNode3);
        }
	nodeList.add(pandstmlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce AAandstmlist2AndstmList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAndstmList pandstmlistNode1;
        {
            // Block
        PLessThan plessthanNode2;
        LinkedList listNode4 = new LinkedList();
        plessthanNode2 = (PLessThan)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pandstmlistNode1 = new AAndstmList(plessthanNode2, listNode4);
        }
	nodeList.add(pandstmlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce AAndstmRest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAndstmRest pandstmrestNode1;
        {
            // Block
        TAnd tandNode2;
        PLessThan plessthanNode3;
        tandNode2 = (TAnd)nodeArrayList1.get(0);
        plessthanNode3 = (PLessThan)nodeArrayList2.get(0);

        pandstmrestNode1 = new AAndstmRest(tandNode2, plessthanNode3);
        }
	nodeList.add(pandstmrestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce AAlessthan1LessThan */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLessThan plessthanNode1;
        {
            // Block
        PPlusMinusList pplusminuslistNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        pplusminuslistNode2 = (PPlusMinusList)nodeArrayList1.get(0);

        plessthanNode1 = new ALessThan(pplusminuslistNode2, null);
        }
	nodeList.add(plessthanNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce AAlessthan2LessThan */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLessThan plessthanNode1;
        {
            // Block
        PPlusMinusList pplusminuslistNode2;
        PLessThanPlusMinus plessthanplusminusNode3;
        pplusminuslistNode2 = (PPlusMinusList)nodeArrayList1.get(0);
        plessthanplusminusNode3 = (PLessThanPlusMinus)nodeArrayList2.get(0);

        plessthanNode1 = new ALessThan(pplusminuslistNode2, plessthanplusminusNode3);
        }
	nodeList.add(plessthanNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce ALessThanPlusMinus */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLessThanPlusMinus plessthanplusminusNode1;
        {
            // Block
        TLess tlessNode2;
        PPlusMinusList pplusminuslistNode3;
        tlessNode2 = (TLess)nodeArrayList1.get(0);
        pplusminuslistNode3 = (PPlusMinusList)nodeArrayList2.get(0);

        plessthanplusminusNode1 = new ALessThanPlusMinus(tlessNode2, pplusminuslistNode3);
        }
	nodeList.add(plessthanplusminusNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce AAplusminuslist1PlusMinusList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPlusMinusList pplusminuslistNode1;
        {
            // Block
        PTimesList ptimeslistNode2;
        LinkedList listNode3 = new LinkedList();
        ptimeslistNode2 = (PTimesList)nodeArrayList1.get(0);
        {
            // Block
        }

        pplusminuslistNode1 = new APlusMinusList(ptimeslistNode2, listNode3);
        }
	nodeList.add(pplusminuslistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new40() /* reduce AAplusminuslist2PlusMinusList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPlusMinusList pplusminuslistNode1;
        {
            // Block
        PTimesList ptimeslistNode2;
        LinkedList listNode4 = new LinkedList();
        ptimeslistNode2 = (PTimesList)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pplusminuslistNode1 = new APlusMinusList(ptimeslistNode2, listNode4);
        }
	nodeList.add(pplusminuslistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new41() /* reduce APlusMinusRest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPlusMinusRest pplusminusrestNode1;
        {
            // Block
        TPlusminusop tplusminusopNode2;
        PTimesList ptimeslistNode3;
        tplusminusopNode2 = (TPlusminusop)nodeArrayList1.get(0);
        ptimeslistNode3 = (PTimesList)nodeArrayList2.get(0);

        pplusminusrestNode1 = new APlusMinusRest(tplusminusopNode2, ptimeslistNode3);
        }
	nodeList.add(pplusminusrestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new42() /* reduce AAtimeslist1TimesList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTimesList ptimeslistNode1;
        {
            // Block
        PPrefixexp pprefixexpNode2;
        LinkedList listNode3 = new LinkedList();
        pprefixexpNode2 = (PPrefixexp)nodeArrayList1.get(0);
        {
            // Block
        }

        ptimeslistNode1 = new ATimesList(pprefixexpNode2, listNode3);
        }
	nodeList.add(ptimeslistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new43() /* reduce AAtimeslist2TimesList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTimesList ptimeslistNode1;
        {
            // Block
        PPrefixexp pprefixexpNode2;
        LinkedList listNode4 = new LinkedList();
        pprefixexpNode2 = (PPrefixexp)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        ptimeslistNode1 = new ATimesList(pprefixexpNode2, listNode4);
        }
	nodeList.add(ptimeslistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new44() /* reduce ATimesRest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTimesRest ptimesrestNode1;
        {
            // Block
        TTimesop ttimesopNode2;
        PPrefixexp pprefixexpNode3;
        ttimesopNode2 = (TTimesop)nodeArrayList1.get(0);
        pprefixexpNode3 = (PPrefixexp)nodeArrayList2.get(0);

        ptimesrestNode1 = new ATimesRest(ttimesopNode2, pprefixexpNode3);
        }
	nodeList.add(ptimesrestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new45() /* reduce ANotExpressionPrefixexp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPrefixexp pprefixexpNode1;
        {
            // Block
        PNotexp pnotexpNode2;
        pnotexpNode2 = (PNotexp)nodeArrayList1.get(0);

        pprefixexpNode1 = new ANotExpressionPrefixexp(pnotexpNode2);
        }
	nodeList.add(pprefixexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new46() /* reduce AExpressionPrefixexp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPrefixexp pprefixexpNode1;
        {
            // Block
        PPostfixexpList ppostfixexplistNode2;
        ppostfixexplistNode2 = (PPostfixexpList)nodeArrayList1.get(0);

        pprefixexpNode1 = new AExpressionPrefixexp(ppostfixexplistNode2);
        }
	nodeList.add(pprefixexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new47() /* reduce ANotexp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNotexp pnotexpNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        PPostfixexpList ppostfixexplistNode4;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        ppostfixexplistNode4 = (PPostfixexpList)nodeArrayList2.get(0);

        pnotexpNode1 = new ANotexp(listNode3, ppostfixexplistNode4);
        }
	nodeList.add(pnotexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new48() /* reduce AApostfixexplist1PostfixexpList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPostfixexpList ppostfixexplistNode1;
        {
            // Block
        PPrimaryExp pprimaryexpNode2;
        LinkedList listNode3 = new LinkedList();
        pprimaryexpNode2 = (PPrimaryExp)nodeArrayList1.get(0);
        {
            // Block
        }

        ppostfixexplistNode1 = new APostfixexpList(pprimaryexpNode2, listNode3);
        }
	nodeList.add(ppostfixexplistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new49() /* reduce AApostfixexplist2PostfixexpList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPostfixexpList ppostfixexplistNode1;
        {
            // Block
        PPrimaryExp pprimaryexpNode2;
        LinkedList listNode4 = new LinkedList();
        pprimaryexpNode2 = (PPrimaryExp)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        ppostfixexplistNode1 = new APostfixexpList(pprimaryexpNode2, listNode4);
        }
	nodeList.add(ppostfixexplistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new50() /* reduce AIndexPostfixexpRest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPostfixexpRest ppostfixexprestNode1;
        {
            // Block
        TLBracket tlbracketNode2;
        PExp pexpNode3;
        TRBracket trbracketNode4;
        tlbracketNode2 = (TLBracket)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        trbracketNode4 = (TRBracket)nodeArrayList3.get(0);

        ppostfixexprestNode1 = new AIndexPostfixexpRest(tlbracketNode2, pexpNode3, trbracketNode4);
        }
	nodeList.add(ppostfixexprestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new51() /* reduce AIdlistPostfixexpRest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPostfixexpRest ppostfixexprestNode1;
        {
            // Block
        PExp pexpNode2;
        TDot tdotNode3;
        TId tidNode4;
        TLParenthese tlparentheseNode5;
        PExplist pexplistNode6;
        TRParenthese trparentheseNode7;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        tlparentheseNode5 = (TLParenthese)nodeArrayList4.get(0);
        pexplistNode6 = (PExplist)nodeArrayList5.get(0);
        trparentheseNode7 = (TRParenthese)nodeArrayList6.get(0);

        ppostfixexprestNode1 = new AIdlistPostfixexpRest(pexpNode2, tdotNode3, tidNode4, tlparentheseNode5, pexplistNode6, trparentheseNode7);
        }
	nodeList.add(ppostfixexprestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new52() /* reduce ALengthPostfixexpRest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPostfixexpRest ppostfixexprestNode1;
        {
            // Block
        PExp pexpNode2;
        TDot tdotNode3;
        TLength tlengthNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        tlengthNode4 = (TLength)nodeArrayList3.get(0);

        ppostfixexprestNode1 = new ALengthPostfixexpRest(pexpNode2, tdotNode3, tlengthNode4);
        }
	nodeList.add(ppostfixexprestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new53() /* reduce ANumberPrimaryExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPrimaryExp pprimaryexpNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pprimaryexpNode1 = new ANumberPrimaryExp(tnumberNode2);
        }
	nodeList.add(pprimaryexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new54() /* reduce ATruePrimaryExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPrimaryExp pprimaryexpNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pprimaryexpNode1 = new ATruePrimaryExp(ttrueNode2);
        }
	nodeList.add(pprimaryexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new55() /* reduce AFalsePrimaryExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPrimaryExp pprimaryexpNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        pprimaryexpNode1 = new AFalsePrimaryExp(tfalseNode2);
        }
	nodeList.add(pprimaryexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new56() /* reduce AIdPrimaryExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPrimaryExp pprimaryexpNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pprimaryexpNode1 = new AIdPrimaryExp(tidNode2);
        }
	nodeList.add(pprimaryexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new57() /* reduce AThisPrimaryExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPrimaryExp pprimaryexpNode1;
        {
            // Block
        TThis tthisNode2;
        tthisNode2 = (TThis)nodeArrayList1.get(0);

        pprimaryexpNode1 = new AThisPrimaryExp(tthisNode2);
        }
	nodeList.add(pprimaryexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new58() /* reduce ANewintPrimaryExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPrimaryExp pprimaryexpNode1;
        {
            // Block
        TNew tnewNode2;
        TInt tintNode3;
        TLBracket tlbracketNode4;
        PExp pexpNode5;
        TRBracket trbracketNode6;
        tnewNode2 = (TNew)nodeArrayList1.get(0);
        tintNode3 = (TInt)nodeArrayList2.get(0);
        tlbracketNode4 = (TLBracket)nodeArrayList3.get(0);
        pexpNode5 = (PExp)nodeArrayList4.get(0);
        trbracketNode6 = (TRBracket)nodeArrayList5.get(0);

        pprimaryexpNode1 = new ANewintPrimaryExp(tnewNode2, tintNode3, tlbracketNode4, pexpNode5, trbracketNode6);
        }
	nodeList.add(pprimaryexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new59() /* reduce ANewidPrimaryExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPrimaryExp pprimaryexpNode1;
        {
            // Block
        TNew tnewNode2;
        TId tidNode3;
        TLParenthese tlparentheseNode4;
        TRParenthese trparentheseNode5;
        tnewNode2 = (TNew)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlparentheseNode4 = (TLParenthese)nodeArrayList3.get(0);
        trparentheseNode5 = (TRParenthese)nodeArrayList4.get(0);

        pprimaryexpNode1 = new ANewidPrimaryExp(tnewNode2, tidNode3, tlparentheseNode4, trparentheseNode5);
        }
	nodeList.add(pprimaryexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new60() /* reduce ALparexprparPrimaryExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPrimaryExp pprimaryexpNode1;
        {
            // Block
        TLParenthese tlparentheseNode2;
        PExp pexpNode3;
        TRParenthese trparentheseNode4;
        tlparentheseNode2 = (TLParenthese)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        trparentheseNode4 = (TRParenthese)nodeArrayList3.get(0);

        pprimaryexpNode1 = new ALparexprparPrimaryExp(tlparentheseNode2, pexpNode3, trparentheseNode4);
        }
	nodeList.add(pprimaryexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new61() /* reduce AAexplistheadexplist1Explist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExplist pexplistNode1;
        {
            // Block
        PExp pexpNode2;
        LinkedList listNode3 = new LinkedList();
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        {
            // Block
        }

        pexplistNode1 = new AExplistheadExplist(pexpNode2, listNode3);
        }
	nodeList.add(pexplistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new62() /* reduce AAexplistheadexplist2Explist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExplist pexplistNode1;
        {
            // Block
        PExp pexpNode2;
        LinkedList listNode4 = new LinkedList();
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexplistNode1 = new AExplistheadExplist(pexpNode2, listNode4);
        }
	nodeList.add(pexplistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new63() /* reduce ABlankExplist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExplist pexplistNode1;
        {
            // Block
        TBlank tblankNode2;
        tblankNode2 = (TBlank)nodeArrayList1.get(0);

        pexplistNode1 = new ABlankExplist(tblankNode2);
        }
	nodeList.add(pexplistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new64() /* reduce AExprest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExprest pexprestNode1;
        {
            // Block
        TComma tcommaNode2;
        PExp pexpNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);

        pexprestNode1 = new AExprest(tcommaNode2, pexpNode3);
        }
	nodeList.add(pexprestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new65() /* reduce ATerminal$Classdecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PClassdecl pclassdeclNode1;
        pclassdeclNode1 = (PClassdecl)nodeArrayList1.get(0);
	if(pclassdeclNode1 != null)
	{
	  listNode2.add(pclassdeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new66() /* reduce ANonTerminal$Classdecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PClassdecl pclassdeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pclassdeclNode2 = (PClassdecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pclassdeclNode2 != null)
	{
	  listNode3.add(pclassdeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new67() /* reduce ATerminal$Vardecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PVardecl pvardeclNode1;
        pvardeclNode1 = (PVardecl)nodeArrayList1.get(0);
	if(pvardeclNode1 != null)
	{
	  listNode2.add(pvardeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new68() /* reduce ANonTerminal$Vardecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PVardecl pvardeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvardeclNode2 = (PVardecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvardeclNode2 != null)
	{
	  listNode3.add(pvardeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new69() /* reduce ATerminal$Methoddecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PMethoddecl pmethoddeclNode1;
        pmethoddeclNode1 = (PMethoddecl)nodeArrayList1.get(0);
	if(pmethoddeclNode1 != null)
	{
	  listNode2.add(pmethoddeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new70() /* reduce ANonTerminal$Methoddecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PMethoddecl pmethoddeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmethoddeclNode2 = (PMethoddecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmethoddeclNode2 != null)
	{
	  listNode3.add(pmethoddeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new71() /* reduce ATerminal$Statement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	if(pstatementNode1 != null)
	{
	  listNode2.add(pstatementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new72() /* reduce ANonTerminal$Statement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PStatement pstatementNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstatementNode2 = (PStatement)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstatementNode2 != null)
	{
	  listNode3.add(pstatementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new73() /* reduce ATerminal$Paramrest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PParamrest pparamrestNode1;
        pparamrestNode1 = (PParamrest)nodeArrayList1.get(0);
	if(pparamrestNode1 != null)
	{
	  listNode2.add(pparamrestNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new74() /* reduce ANonTerminal$Paramrest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PParamrest pparamrestNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pparamrestNode2 = (PParamrest)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pparamrestNode2 != null)
	{
	  listNode3.add(pparamrestNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new75() /* reduce ATerminal$AndstmRest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PAndstmRest pandstmrestNode1;
        pandstmrestNode1 = (PAndstmRest)nodeArrayList1.get(0);
	if(pandstmrestNode1 != null)
	{
	  listNode2.add(pandstmrestNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new76() /* reduce ANonTerminal$AndstmRest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PAndstmRest pandstmrestNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pandstmrestNode2 = (PAndstmRest)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pandstmrestNode2 != null)
	{
	  listNode3.add(pandstmrestNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new77() /* reduce ATerminal$PlusMinusRest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PPlusMinusRest pplusminusrestNode1;
        pplusminusrestNode1 = (PPlusMinusRest)nodeArrayList1.get(0);
	if(pplusminusrestNode1 != null)
	{
	  listNode2.add(pplusminusrestNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new78() /* reduce ANonTerminal$PlusMinusRest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PPlusMinusRest pplusminusrestNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pplusminusrestNode2 = (PPlusMinusRest)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pplusminusrestNode2 != null)
	{
	  listNode3.add(pplusminusrestNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new79() /* reduce ATerminal$TimesRest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PTimesRest ptimesrestNode1;
        ptimesrestNode1 = (PTimesRest)nodeArrayList1.get(0);
	if(ptimesrestNode1 != null)
	{
	  listNode2.add(ptimesrestNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new80() /* reduce ANonTerminal$TimesRest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PTimesRest ptimesrestNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        ptimesrestNode2 = (PTimesRest)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(ptimesrestNode2 != null)
	{
	  listNode3.add(ptimesrestNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new81() /* reduce ATerminal$Not */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        TNot tnotNode1;
        tnotNode1 = (TNot)nodeArrayList1.get(0);
	if(tnotNode1 != null)
	{
	  listNode2.add(tnotNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new82() /* reduce ANonTerminal$Not */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        TNot tnotNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        tnotNode2 = (TNot)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(tnotNode2 != null)
	{
	  listNode3.add(tnotNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new83() /* reduce ATerminal$PostfixexpRest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PPostfixexpRest ppostfixexprestNode1;
        ppostfixexprestNode1 = (PPostfixexpRest)nodeArrayList1.get(0);
	if(ppostfixexprestNode1 != null)
	{
	  listNode2.add(ppostfixexprestNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new84() /* reduce ANonTerminal$PostfixexpRest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PPostfixexpRest ppostfixexprestNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        ppostfixexprestNode2 = (PPostfixexpRest)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(ppostfixexprestNode2 != null)
	{
	  listNode3.add(ppostfixexprestNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new85() /* reduce ATerminal$Exprest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PExprest pexprestNode1;
        pexprestNode1 = (PExprest)nodeArrayList1.get(0);
	if(pexprestNode1 != null)
	{
	  listNode2.add(pexprestNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new86() /* reduce ANonTerminal$Exprest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PExprest pexprestNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexprestNode2 = (PExprest)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexprestNode2 != null)
	{
	  listNode3.add(pexprestNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {18, SHIFT, 4}, },
			{{-1, ERROR, 2}, {37, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, {0, SHIFT, 5}, },
			{{-1, ERROR, 4}, {28, SHIFT, 8}, },
			{{-1, ERROR, 5}, {18, SHIFT, 9}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 1}, {0, SHIFT, 5}, },
			{{-1, ERROR, 8}, {2, SHIFT, 11}, },
			{{-1, ERROR, 9}, {1, SHIFT, 13}, {28, SHIFT, 14}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 11}, {3, SHIFT, 15}, },
			{{-1, ERROR, 12}, {29, SHIFT, 16}, },
			{{-1, ERROR, 13}, {18, SHIFT, 17}, },
			{{-1, ERROR, 14}, {2, SHIFT, 18}, {7, SHIFT, 19}, {8, SHIFT, 20}, {18, SHIFT, 21}, {29, SHIFT, 22}, },
			{{-1, ERROR, 15}, {4, SHIFT, 28}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 17}, {28, SHIFT, 29}, },
			{{-1, ERROR, 18}, {7, SHIFT, 19}, {8, SHIFT, 20}, {18, SHIFT, 21}, },
			{{-1, REDUCE, 23}, {26, SHIFT, 31}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 69}, },
			{{-1, ERROR, 25}, {18, SHIFT, 32}, },
			{{-1, ERROR, 26}, {2, SHIFT, 18}, {7, SHIFT, 19}, {8, SHIFT, 20}, {18, SHIFT, 21}, {29, SHIFT, 33}, },
			{{-1, ERROR, 27}, {2, SHIFT, 18}, {29, SHIFT, 36}, },
			{{-1, ERROR, 28}, {5, SHIFT, 38}, },
			{{-1, ERROR, 29}, {2, SHIFT, 18}, {7, SHIFT, 19}, {8, SHIFT, 20}, {18, SHIFT, 21}, {29, SHIFT, 39}, },
			{{-1, ERROR, 30}, {18, SHIFT, 42}, },
			{{-1, ERROR, 31}, {27, SHIFT, 43}, },
			{{-1, ERROR, 32}, {33, SHIFT, 44}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 68}, },
			{{-1, ERROR, 35}, {2, SHIFT, 18}, {29, SHIFT, 45}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 70}, },
			{{-1, ERROR, 38}, {30, SHIFT, 46}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 40}, {2, SHIFT, 18}, {7, SHIFT, 19}, {8, SHIFT, 20}, {18, SHIFT, 21}, {29, SHIFT, 47}, },
			{{-1, ERROR, 41}, {2, SHIFT, 18}, {29, SHIFT, 49}, },
			{{-1, ERROR, 42}, {30, SHIFT, 50}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 46}, {6, SHIFT, 51}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 48}, {2, SHIFT, 18}, {29, SHIFT, 52}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 50}, {7, SHIFT, 19}, {8, SHIFT, 20}, {18, SHIFT, 21}, {35, SHIFT, 53}, },
			{{-1, ERROR, 51}, {26, SHIFT, 56}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 54}, {31, SHIFT, 57}, },
			{{-1, ERROR, 55}, {18, SHIFT, 58}, },
			{{-1, ERROR, 56}, {27, SHIFT, 59}, },
			{{-1, ERROR, 57}, {28, SHIFT, 60}, },
			{{-1, REDUCE, 17}, {34, SHIFT, 61}, },
			{{-1, ERROR, 59}, {18, SHIFT, 64}, },
			{{-1, ERROR, 60}, {7, SHIFT, 19}, {8, SHIFT, 20}, {9, SHIFT, 65}, {11, SHIFT, 66}, {16, SHIFT, 67}, {18, SHIFT, 68}, {28, SHIFT, 69}, {36, SHIFT, 70}, },
			{{-1, ERROR, 61}, {7, SHIFT, 19}, {8, SHIFT, 20}, {18, SHIFT, 21}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 18}, {34, SHIFT, 61}, },
			{{-1, ERROR, 64}, {31, SHIFT, 76}, },
			{{-1, ERROR, 65}, {30, SHIFT, 77}, },
			{{-1, ERROR, 66}, {30, SHIFT, 78}, },
			{{-1, ERROR, 67}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, {19, SHIFT, 84}, {25, SHIFT, 85}, {30, SHIFT, 86}, },
			{{-1, REDUCE, 24}, {24, SHIFT, 97}, {26, SHIFT, 98}, },
			{{-1, ERROR, 69}, {9, SHIFT, 65}, {11, SHIFT, 66}, {18, SHIFT, 99}, {28, SHIFT, 69}, {29, SHIFT, 100}, {36, SHIFT, 70}, },
			{{-1, ERROR, 70}, {30, SHIFT, 102}, },
			{{-1, REDUCE, 71}, },
			{{-1, ERROR, 72}, {7, SHIFT, 19}, {8, SHIFT, 20}, {9, SHIFT, 65}, {11, SHIFT, 66}, {16, SHIFT, 103}, {18, SHIFT, 68}, {28, SHIFT, 69}, {36, SHIFT, 70}, },
			{{-1, ERROR, 73}, {9, SHIFT, 65}, {11, SHIFT, 66}, {16, SHIFT, 105}, {18, SHIFT, 99}, {28, SHIFT, 69}, {36, SHIFT, 70}, },
			{{-1, ERROR, 74}, {18, SHIFT, 107}, },
			{{-1, REDUCE, 74}, },
			{{-1, ERROR, 76}, {28, SHIFT, 108}, },
			{{-1, ERROR, 77}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, {19, SHIFT, 84}, {25, SHIFT, 85}, {30, SHIFT, 86}, },
			{{-1, ERROR, 78}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, {19, SHIFT, 84}, {25, SHIFT, 85}, {30, SHIFT, 86}, },
			{{-1, ERROR, 79}, {7, SHIFT, 111}, {18, SHIFT, 112}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 81}, },
			{{-1, ERROR, 86}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, {19, SHIFT, 84}, {25, SHIFT, 85}, {30, SHIFT, 86}, },
			{{-1, ERROR, 87}, {33, SHIFT, 114}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 33}, {22, SHIFT, 115}, },
			{{-1, REDUCE, 36}, {23, SHIFT, 118}, },
			{{-1, REDUCE, 39}, {20, SHIFT, 120}, },
			{{-1, REDUCE, 42}, {21, SHIFT, 123}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 48}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, {19, SHIFT, 84}, {25, SHIFT, 85}, {26, SHIFT, 126}, {30, SHIFT, 86}, },
			{{-1, ERROR, 96}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, {19, SHIFT, 84}, {25, SHIFT, 130}, {30, SHIFT, 86}, },
			{{-1, ERROR, 97}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, {19, SHIFT, 84}, {25, SHIFT, 85}, {30, SHIFT, 86}, },
			{{-1, ERROR, 98}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, {19, SHIFT, 84}, {25, SHIFT, 85}, {30, SHIFT, 86}, },
			{{-1, ERROR, 99}, {24, SHIFT, 97}, {26, SHIFT, 98}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 101}, {9, SHIFT, 65}, {11, SHIFT, 66}, {18, SHIFT, 99}, {28, SHIFT, 69}, {29, SHIFT, 134}, {36, SHIFT, 70}, },
			{{-1, ERROR, 102}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, {19, SHIFT, 84}, {25, SHIFT, 85}, {30, SHIFT, 86}, },
			{{-1, ERROR, 103}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, {19, SHIFT, 84}, {25, SHIFT, 85}, {30, SHIFT, 86}, },
			{{-1, ERROR, 104}, {9, SHIFT, 65}, {11, SHIFT, 66}, {16, SHIFT, 137}, {18, SHIFT, 99}, {28, SHIFT, 69}, {36, SHIFT, 70}, },
			{{-1, ERROR, 105}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, {19, SHIFT, 84}, {25, SHIFT, 85}, {30, SHIFT, 86}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 108}, {9, SHIFT, 65}, {11, SHIFT, 66}, {18, SHIFT, 99}, {28, SHIFT, 69}, {36, SHIFT, 70}, },
			{{-1, ERROR, 109}, {31, SHIFT, 140}, },
			{{-1, ERROR, 110}, {31, SHIFT, 141}, },
			{{-1, ERROR, 111}, {26, SHIFT, 142}, },
			{{-1, ERROR, 112}, {30, SHIFT, 143}, },
			{{-1, ERROR, 113}, {31, SHIFT, 144}, },
			{{-1, ERROR, 114}, {29, SHIFT, 145}, },
			{{-1, ERROR, 115}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, {19, SHIFT, 84}, {25, SHIFT, 85}, {30, SHIFT, 86}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 34}, {22, SHIFT, 115}, },
			{{-1, ERROR, 118}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, {19, SHIFT, 84}, {25, SHIFT, 85}, {30, SHIFT, 86}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 120}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, {19, SHIFT, 84}, {25, SHIFT, 85}, {30, SHIFT, 86}, },
			{{-1, REDUCE, 77}, },
			{{-1, REDUCE, 40}, {20, SHIFT, 120}, },
			{{-1, ERROR, 123}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, {19, SHIFT, 84}, {25, SHIFT, 85}, {30, SHIFT, 86}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 43}, {21, SHIFT, 123}, },
			{{-1, ERROR, 126}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, {19, SHIFT, 84}, {25, SHIFT, 85}, {30, SHIFT, 86}, },
			{{-1, ERROR, 127}, {32, SHIFT, 154}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 49}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, {19, SHIFT, 84}, {25, SHIFT, 85}, {26, SHIFT, 126}, {30, SHIFT, 86}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 132}, {33, SHIFT, 156}, },
			{{-1, ERROR, 133}, {27, SHIFT, 157}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 135}, {31, SHIFT, 158}, },
			{{-1, ERROR, 136}, {33, SHIFT, 159}, },
			{{-1, ERROR, 137}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, {19, SHIFT, 84}, {25, SHIFT, 85}, {30, SHIFT, 86}, },
			{{-1, ERROR, 138}, {33, SHIFT, 161}, },
			{{-1, ERROR, 139}, {29, SHIFT, 162}, },
			{{-1, ERROR, 140}, {9, SHIFT, 65}, {11, SHIFT, 66}, {18, SHIFT, 99}, {28, SHIFT, 69}, {36, SHIFT, 70}, },
			{{-1, ERROR, 141}, {9, SHIFT, 65}, {11, SHIFT, 66}, {18, SHIFT, 99}, {28, SHIFT, 69}, {36, SHIFT, 70}, },
			{{-1, ERROR, 142}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, {19, SHIFT, 84}, {25, SHIFT, 85}, {30, SHIFT, 86}, },
			{{-1, ERROR, 143}, {31, SHIFT, 166}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 80}, },
			{{-1, ERROR, 153}, {27, SHIFT, 167}, },
			{{-1, ERROR, 154}, {12, SHIFT, 168}, {18, SHIFT, 169}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 157}, {24, SHIFT, 170}, },
			{{-1, ERROR, 158}, {33, SHIFT, 171}, },
			{{-1, ERROR, 159}, {29, SHIFT, 172}, },
			{{-1, ERROR, 160}, {33, SHIFT, 173}, },
			{{-1, ERROR, 161}, {29, SHIFT, 174}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 163}, {10, SHIFT, 175}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 165}, {27, SHIFT, 176}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 169}, {30, SHIFT, 177}, },
			{{-1, ERROR, 170}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, {19, SHIFT, 84}, {25, SHIFT, 85}, {30, SHIFT, 86}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 173}, {29, SHIFT, 179}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 175}, {9, SHIFT, 65}, {11, SHIFT, 66}, {18, SHIFT, 99}, {28, SHIFT, 69}, {36, SHIFT, 70}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 177}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, {19, SHIFT, 84}, {25, SHIFT, 85}, {30, SHIFT, 86}, {35, SHIFT, 181}, },
			{{-1, ERROR, 178}, {33, SHIFT, 184}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 61}, {34, SHIFT, 185}, },
			{{-1, ERROR, 183}, {31, SHIFT, 188}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 185}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, {19, SHIFT, 84}, {25, SHIFT, 85}, {30, SHIFT, 86}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 62}, {34, SHIFT, 185}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 86}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, },
			{{-1, 12}, },
			{{-1, 6}, {7, 10}, },
			{{-1, 23}, {26, 34}, {40, 34}, {72, 34}, },
			{{-1, 24}, {27, 37}, {35, 37}, {41, 37}, {48, 37}, },
			{{-1, 54}, },
			{{-1, 62}, {63, 75}, },
			{{-1, 25}, {18, 30}, {50, 55}, {61, 74}, },
			{{-1, 71}, {73, 106}, {101, 106}, {104, 106}, {108, 139}, {140, 163}, {141, 164}, {175, 180}, },
			{{-1, 127}, {67, 87}, {77, 109}, {78, 110}, {86, 113}, {97, 132}, {98, 133}, {102, 135}, {103, 136}, {105, 138}, {126, 153}, {137, 160}, {142, 165}, {170, 178}, {177, 182}, {185, 189}, },
			{{-1, 88}, },
			{{-1, 116}, {117, 147}, },
			{{-1, 89}, {115, 146}, },
			{{-1, 119}, },
			{{-1, 90}, {118, 148}, },
			{{-1, 121}, {122, 150}, },
			{{-1, 91}, {120, 149}, },
			{{-1, 124}, {125, 152}, },
			{{-1, 92}, {123, 151}, },
			{{-1, 93}, },
			{{-1, 94}, {96, 131}, },
			{{-1, 128}, {129, 155}, },
			{{-1, 95}, },
			{{-1, 183}, },
			{{-1, 186}, {187, 190}, },
			{{-1, 7}, },
			{{-1, 26}, {29, 40}, {60, 72}, },
			{{-1, 27}, {26, 35}, {29, 41}, {40, 48}, },
			{{-1, 73}, {69, 101}, {72, 104}, },
			{{-1, 63}, },
			{{-1, 117}, },
			{{-1, 122}, },
			{{-1, 125}, },
			{{-1, 96}, },
			{{-1, 129}, },
			{{-1, 187}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'class'",
			"expecting: id",
			"expecting: EOF",
			"expecting: 'class', EOF",
			"expecting: '{'",
			"expecting: 'public'",
			"expecting: 'extends', '{'",
			"expecting: 'static'",
			"expecting: '}'",
			"expecting: 'public', 'int', 'boolean', id, '}'",
			"expecting: 'void'",
			"expecting: 'int', 'boolean', id",
			"expecting: id, '['",
			"expecting: 'public', 'int', 'boolean', 'if', 'while', 'return', id, '{', '}', 'System.out.println'",
			"expecting: 'public', '}'",
			"expecting: 'main'",
			"expecting: ']'",
			"expecting: ';'",
			"expecting: '('",
			"expecting: 'String'",
			"expecting: 'int', 'boolean', id, blank",
			"expecting: '['",
			"expecting: ')'",
			"expecting: ')', ','",
			"expecting: 'int', 'boolean', 'if', 'while', 'return', id, '{', 'System.out.println'",
			"expecting: 'new', 'true', 'false', 'this', id, number, '!', '('",
			"expecting: id, '=', '['",
			"expecting: 'if', 'while', id, '{', '}', 'System.out.println'",
			"expecting: 'if', 'while', 'return', id, '{', '}', 'System.out.println'",
			"expecting: 'if', 'while', 'return', id, '{', 'System.out.println'",
			"expecting: 'int', id",
			"expecting: 'new', 'true', 'false', 'this', id, number, plusminusop, '*', '&&', '<', '!', '[', ']', '(', ')', '.', ';', ','",
			"expecting: ']', ')', '.', ';', ','",
			"expecting: '&&', ']', ')', '.', ';', ','",
			"expecting: '&&', '<', ']', ')', '.', ';', ','",
			"expecting: plusminusop, '&&', '<', ']', ')', '.', ';', ','",
			"expecting: plusminusop, '*', '&&', '<', ']', ')', '.', ';', ','",
			"expecting: '=', '['",
			"expecting: 'if', 'else', 'while', 'return', id, '{', '}', 'System.out.println'",
			"expecting: 'if', 'while', id, '{', 'System.out.println'",
			"expecting: '.'",
			"expecting: 'length', id",
			"expecting: '='",
			"expecting: 'else'",
			"expecting: 'new', 'true', 'false', 'this', id, number, '!', '(', blank",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 1, 3, 3, 5, 6, 3, 7, 8, 1, 9, 10, 3, 4, 11, 12, 1, 1, 3, 13, 14, 1, 9, 14, 15, 9, 1, 16, 17, 3, 13, 14, 3, 14, 18, 3, 9, 14, 18, 1, 13, 3, 19, 3, 14, 3, 20, 21, 3, 22, 22, 1, 16, 4, 23, 1, 24, 11, 23, 23, 22, 18, 18, 25, 26, 27, 18, 28, 24, 29, 1, 23, 4, 25, 25, 30, 31, 31, 31, 31, 31, 25, 25, 17, 32, 33, 34, 35, 36, 36, 36, 31, 25, 25, 25, 37, 38, 27, 25, 25, 29, 25, 28, 23, 39, 22, 22, 21, 18, 22, 8, 25, 33, 33, 25, 33, 25, 35, 35, 25, 36, 36, 25, 40, 31, 31, 25, 36, 17, 16, 38, 22, 17, 25, 17, 8, 39, 39, 25, 22, 31, 14, 33, 33, 33, 35, 35, 36, 36, 16, 41, 31, 38, 42, 17, 8, 17, 8, 8, 43, 38, 16, 31, 31, 31, 18, 25, 38, 14, 8, 14, 39, 31, 44, 17, 14, 38, 22, 23, 22, 38, 25, 23, 23, 31, 23, 23, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
