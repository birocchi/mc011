/* This file was generated by SableCC (http://www.sablecc.org/). */

package parser;

import lexer.*;
import node.*;
import analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AAprogram1Program */
		    {
			ArrayList list = new0();
			push(goTo(0), list);
		    }
		    break;
                    case 1: /* reduce AAprogram2Program */
		    {
			ArrayList list = new1();
			push(goTo(0), list);
		    }
		    break;
                    case 2: /* reduce AMainClass */
		    {
			ArrayList list = new2();
			push(goTo(1), list);
		    }
		    break;
                    case 3: /* reduce AAsimpleclassdecl1ClassDecl */
		    {
			ArrayList list = new3();
			push(goTo(2), list);
		    }
		    break;
                    case 4: /* reduce AAsimpleclassdecl2ClassDecl */
		    {
			ArrayList list = new4();
			push(goTo(2), list);
		    }
		    break;
                    case 5: /* reduce AAsimpleclassdecl3ClassDecl */
		    {
			ArrayList list = new5();
			push(goTo(2), list);
		    }
		    break;
                    case 6: /* reduce AAsimpleclassdecl4ClassDecl */
		    {
			ArrayList list = new6();
			push(goTo(2), list);
		    }
		    break;
                    case 7: /* reduce AAextendsclassdecl1ClassDecl */
		    {
			ArrayList list = new7();
			push(goTo(2), list);
		    }
		    break;
                    case 8: /* reduce AAextendsclassdecl2ClassDecl */
		    {
			ArrayList list = new8();
			push(goTo(2), list);
		    }
		    break;
                    case 9: /* reduce AAextendsclassdecl3ClassDecl */
		    {
			ArrayList list = new9();
			push(goTo(2), list);
		    }
		    break;
                    case 10: /* reduce AAextendsclassdecl4ClassDecl */
		    {
			ArrayList list = new10();
			push(goTo(2), list);
		    }
		    break;
                    case 11: /* reduce AVarDecl */
		    {
			ArrayList list = new11();
			push(goTo(3), list);
		    }
		    break;
                    case 12: /* reduce AAmethoddecl1MethodDecl */
		    {
			ArrayList list = new12();
			push(goTo(4), list);
		    }
		    break;
                    case 13: /* reduce AAmethoddecl2MethodDecl */
		    {
			ArrayList list = new13();
			push(goTo(4), list);
		    }
		    break;
                    case 14: /* reduce AAmethoddecl3MethodDecl */
		    {
			ArrayList list = new14();
			push(goTo(4), list);
		    }
		    break;
                    case 15: /* reduce AAmethoddecl4MethodDecl */
		    {
			ArrayList list = new15();
			push(goTo(4), list);
		    }
		    break;
                    case 16: /* reduce AAfirstparameterparamlist1Paramlist */
		    {
			ArrayList list = new16();
			push(goTo(5), list);
		    }
		    break;
                    case 17: /* reduce AAfirstparameterparamlist2Paramlist */
		    {
			ArrayList list = new17();
			push(goTo(5), list);
		    }
		    break;
                    case 18: /* reduce AEmptyParamlist */
		    {
			ArrayList list = new18();
			push(goTo(5), list);
		    }
		    break;
                    case 19: /* reduce AAnotherparameterParamrest */
		    {
			ArrayList list = new19();
			push(goTo(6), list);
		    }
		    break;
                    case 20: /* reduce AParameter */
		    {
			ArrayList list = new20();
			push(goTo(7), list);
		    }
		    break;
                    case 21: /* reduce AIntvectorType */
		    {
			ArrayList list = new21();
			push(goTo(8), list);
		    }
		    break;
                    case 22: /* reduce ABooleanType */
		    {
			ArrayList list = new22();
			push(goTo(8), list);
		    }
		    break;
                    case 23: /* reduce AIntType */
		    {
			ArrayList list = new23();
			push(goTo(8), list);
		    }
		    break;
                    case 24: /* reduce AIdType */
		    {
			ArrayList list = new24();
			push(goTo(8), list);
		    }
		    break;
                    case 25: /* reduce AStmWithoutTrailingSubstmStatement */
		    {
			ArrayList list = new25();
			push(goTo(9), list);
		    }
		    break;
                    case 26: /* reduce AIfStatement */
		    {
			ArrayList list = new26();
			push(goTo(9), list);
		    }
		    break;
                    case 27: /* reduce AIfElseStatement */
		    {
			ArrayList list = new27();
			push(goTo(9), list);
		    }
		    break;
                    case 28: /* reduce AWhileStatement */
		    {
			ArrayList list = new28();
			push(goTo(9), list);
		    }
		    break;
                    case 29: /* reduce AAstatementliststmwithouttrailingsubstm1StmWithoutTrailingSubstm */
		    {
			ArrayList list = new29();
			push(goTo(10), list);
		    }
		    break;
                    case 30: /* reduce AAstatementliststmwithouttrailingsubstm2StmWithoutTrailingSubstm */
		    {
			ArrayList list = new30();
			push(goTo(10), list);
		    }
		    break;
                    case 31: /* reduce APrintStmWithoutTrailingSubstm */
		    {
			ArrayList list = new31();
			push(goTo(10), list);
		    }
		    break;
                    case 32: /* reduce AAttrStmWithoutTrailingSubstm */
		    {
			ArrayList list = new32();
			push(goTo(10), list);
		    }
		    break;
                    case 33: /* reduce AArrayattrStmWithoutTrailingSubstm */
		    {
			ArrayList list = new33();
			push(goTo(10), list);
		    }
		    break;
                    case 34: /* reduce AStmWithoutTrailingSubstmStmNoShortIf */
		    {
			ArrayList list = new34();
			push(goTo(11), list);
		    }
		    break;
                    case 35: /* reduce AWhileNoShortIfStmNoShortIf */
		    {
			ArrayList list = new35();
			push(goTo(11), list);
		    }
		    break;
                    case 36: /* reduce AIfElseNoShortIfStmNoShortIf */
		    {
			ArrayList list = new36();
			push(goTo(11), list);
		    }
		    break;
                    case 37: /* reduce AAndExp */
		    {
			ArrayList list = new37();
			push(goTo(12), list);
		    }
		    break;
                    case 38: /* reduce ALessThanExp */
		    {
			ArrayList list = new38();
			push(goTo(12), list);
		    }
		    break;
                    case 39: /* reduce ALessThanLessThan */
		    {
			ArrayList list = new39();
			push(goTo(13), list);
		    }
		    break;
                    case 40: /* reduce APlusMinusLessThan */
		    {
			ArrayList list = new40();
			push(goTo(13), list);
		    }
		    break;
                    case 41: /* reduce APlusPlusMinus */
		    {
			ArrayList list = new41();
			push(goTo(14), list);
		    }
		    break;
                    case 42: /* reduce AMinusPlusMinus */
		    {
			ArrayList list = new42();
			push(goTo(14), list);
		    }
		    break;
                    case 43: /* reduce ATimesPlusMinus */
		    {
			ArrayList list = new43();
			push(goTo(14), list);
		    }
		    break;
                    case 44: /* reduce ATimesTimes */
		    {
			ArrayList list = new44();
			push(goTo(15), list);
		    }
		    break;
                    case 45: /* reduce ANotexpTimes */
		    {
			ArrayList list = new45();
			push(goTo(15), list);
		    }
		    break;
                    case 46: /* reduce ANotexpNotExp */
		    {
			ArrayList list = new46();
			push(goTo(16), list);
		    }
		    break;
                    case 47: /* reduce APostfixexpNotExp */
		    {
			ArrayList list = new47();
			push(goTo(16), list);
		    }
		    break;
                    case 48: /* reduce AArraygetPostfixExp */
		    {
			ArrayList list = new48();
			push(goTo(17), list);
		    }
		    break;
                    case 49: /* reduce AMethodcallPostfixExp */
		    {
			ArrayList list = new49();
			push(goTo(17), list);
		    }
		    break;
                    case 50: /* reduce ALengthPostfixExp */
		    {
			ArrayList list = new50();
			push(goTo(17), list);
		    }
		    break;
                    case 51: /* reduce APrimaryexpPostfixExp */
		    {
			ArrayList list = new51();
			push(goTo(17), list);
		    }
		    break;
                    case 52: /* reduce ANumberPrimaryExp */
		    {
			ArrayList list = new52();
			push(goTo(18), list);
		    }
		    break;
                    case 53: /* reduce ATruePrimaryExp */
		    {
			ArrayList list = new53();
			push(goTo(18), list);
		    }
		    break;
                    case 54: /* reduce AFalsePrimaryExp */
		    {
			ArrayList list = new54();
			push(goTo(18), list);
		    }
		    break;
                    case 55: /* reduce AIdPrimaryExp */
		    {
			ArrayList list = new55();
			push(goTo(18), list);
		    }
		    break;
                    case 56: /* reduce AThisPrimaryExp */
		    {
			ArrayList list = new56();
			push(goTo(18), list);
		    }
		    break;
                    case 57: /* reduce ANewintarrayPrimaryExp */
		    {
			ArrayList list = new57();
			push(goTo(18), list);
		    }
		    break;
                    case 58: /* reduce ANewidPrimaryExp */
		    {
			ArrayList list = new58();
			push(goTo(18), list);
		    }
		    break;
                    case 59: /* reduce ALparexprparPrimaryExp */
		    {
			ArrayList list = new59();
			push(goTo(18), list);
		    }
		    break;
                    case 60: /* reduce AAexplistheadexplist1Explist */
		    {
			ArrayList list = new60();
			push(goTo(19), list);
		    }
		    break;
                    case 61: /* reduce AAexplistheadexplist2Explist */
		    {
			ArrayList list = new61();
			push(goTo(19), list);
		    }
		    break;
                    case 62: /* reduce ABlankExplist */
		    {
			ArrayList list = new62();
			push(goTo(19), list);
		    }
		    break;
                    case 63: /* reduce AExprest */
		    {
			ArrayList list = new63();
			push(goTo(20), list);
		    }
		    break;
                    case 64: /* reduce ATerminal$ClassDecl */
		    {
			ArrayList list = new64();
			push(goTo(21), list);
		    }
		    break;
                    case 65: /* reduce ANonTerminal$ClassDecl */
		    {
			ArrayList list = new65();
			push(goTo(21), list);
		    }
		    break;
                    case 66: /* reduce ATerminal$VarDecl */
		    {
			ArrayList list = new66();
			push(goTo(22), list);
		    }
		    break;
                    case 67: /* reduce ANonTerminal$VarDecl */
		    {
			ArrayList list = new67();
			push(goTo(22), list);
		    }
		    break;
                    case 68: /* reduce ATerminal$MethodDecl */
		    {
			ArrayList list = new68();
			push(goTo(23), list);
		    }
		    break;
                    case 69: /* reduce ANonTerminal$MethodDecl */
		    {
			ArrayList list = new69();
			push(goTo(23), list);
		    }
		    break;
                    case 70: /* reduce ATerminal$Statement */
		    {
			ArrayList list = new70();
			push(goTo(24), list);
		    }
		    break;
                    case 71: /* reduce ANonTerminal$Statement */
		    {
			ArrayList list = new71();
			push(goTo(24), list);
		    }
		    break;
                    case 72: /* reduce ATerminal$Paramrest */
		    {
			ArrayList list = new72();
			push(goTo(25), list);
		    }
		    break;
                    case 73: /* reduce ANonTerminal$Paramrest */
		    {
			ArrayList list = new73();
			push(goTo(25), list);
		    }
		    break;
                    case 74: /* reduce ATerminal$Exprest */
		    {
			ArrayList list = new74();
			push(goTo(26), list);
		    }
		    break;
                    case 75: /* reduce ANonTerminal$Exprest */
		    {
			ArrayList list = new75();
			push(goTo(26), list);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AAprogram1Program */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PMainClass pmainclassNode2;
        LinkedList listNode3 = new LinkedList();
        pmainclassNode2 = (PMainClass)nodeArrayList1.get(0);
        {
            // Block
        }

        pprogramNode1 = new AProgram(pmainclassNode2, listNode3);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AAprogram2Program */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PMainClass pmainclassNode2;
        LinkedList listNode4 = new LinkedList();
        pmainclassNode2 = (PMainClass)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pprogramNode1 = new AProgram(pmainclassNode2, listNode4);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AMainClass */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList17 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList16 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList15 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList14 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMainClass pmainclassNode1;
        {
            // Block
        TId tidNode2;
        TId tidNode3;
        PStatement pstatementNode4;
        tidNode2 = (TId)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList12.get(0);
        pstatementNode4 = (PStatement)nodeArrayList15.get(0);

        pmainclassNode1 = new AMainClass(tidNode2, tidNode3, pstatementNode4);
        }
	nodeList.add(pmainclassNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AAsimpleclassdecl1ClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TId tidNode2;
        LinkedList listNode3 = new LinkedList();
        LinkedList listNode4 = new LinkedList();
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        }
        {
            // Block
        }

        pclassdeclNode1 = new ASimpleClassDecl(tidNode2, listNode3, listNode4);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AAsimpleclassdecl2ClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TId tidNode2;
        LinkedList listNode4 = new LinkedList();
        LinkedList listNode5 = new LinkedList();
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        }

        pclassdeclNode1 = new ASimpleClassDecl(tidNode2, listNode4, listNode5);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce AAsimpleclassdecl3ClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TId tidNode2;
        LinkedList listNode3 = new LinkedList();
        LinkedList listNode5 = new LinkedList();
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pclassdeclNode1 = new ASimpleClassDecl(tidNode2, listNode3, listNode5);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AAsimpleclassdecl4ClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TId tidNode2;
        LinkedList listNode4 = new LinkedList();
        LinkedList listNode6 = new LinkedList();
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList5.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pclassdeclNode1 = new ASimpleClassDecl(tidNode2, listNode4, listNode6);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AAextendsclassdecl1ClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TId tidNode2;
        TId tidNode3;
        LinkedList listNode4 = new LinkedList();
        LinkedList listNode5 = new LinkedList();
        tidNode2 = (TId)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList4.get(0);
        {
            // Block
        }
        {
            // Block
        }

        pclassdeclNode1 = new AExtendsClassDecl(tidNode2, tidNode3, listNode4, listNode5);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce AAextendsclassdecl2ClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TId tidNode2;
        TId tidNode3;
        LinkedList listNode5 = new LinkedList();
        LinkedList listNode6 = new LinkedList();
        tidNode2 = (TId)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList4.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList6.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        }

        pclassdeclNode1 = new AExtendsClassDecl(tidNode2, tidNode3, listNode5, listNode6);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce AAextendsclassdecl3ClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TId tidNode2;
        TId tidNode3;
        LinkedList listNode4 = new LinkedList();
        LinkedList listNode6 = new LinkedList();
        tidNode2 = (TId)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList4.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList6.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pclassdeclNode1 = new AExtendsClassDecl(tidNode2, tidNode3, listNode4, listNode6);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AAextendsclassdecl4ClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TId tidNode2;
        TId tidNode3;
        LinkedList listNode5 = new LinkedList();
        LinkedList listNode7 = new LinkedList();
        tidNode2 = (TId)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList4.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList6.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList listNode6 = new LinkedList();
        listNode6 = (LinkedList)nodeArrayList7.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pclassdeclNode1 = new AExtendsClassDecl(tidNode2, tidNode3, listNode5, listNode7);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce AVarDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVarDecl pvardeclNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pvardeclNode1 = new AVarDecl(ptypeNode2, tidNode3);
        }
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AAmethoddecl1MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        LinkedList listNode5 = new LinkedList();
        LinkedList listNode6 = new LinkedList();
        LinkedList listNode7 = new LinkedList();
        PExp pexpNode8;
        ptypeNode2 = (PType)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        }
        {
            // Block
        }
        pexpNode8 = (PExp)nodeArrayList9.get(0);

        pmethoddeclNode1 = new AMethodDecl(ptypeNode2, tidNode3, listNode5, listNode6, listNode7, pexpNode8);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AAmethoddecl2MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        LinkedList listNode5 = new LinkedList();
        LinkedList listNode7 = new LinkedList();
        LinkedList listNode8 = new LinkedList();
        PExp pexpNode9;
        ptypeNode2 = (PType)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList listNode6 = new LinkedList();
        listNode6 = (LinkedList)nodeArrayList8.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        }
        pexpNode9 = (PExp)nodeArrayList10.get(0);

        pmethoddeclNode1 = new AMethodDecl(ptypeNode2, tidNode3, listNode5, listNode7, listNode8, pexpNode9);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce AAmethoddecl3MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        LinkedList listNode5 = new LinkedList();
        LinkedList listNode6 = new LinkedList();
        LinkedList listNode8 = new LinkedList();
        PExp pexpNode9;
        ptypeNode2 = (PType)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        }
        {
            // Block
        LinkedList listNode7 = new LinkedList();
        listNode7 = (LinkedList)nodeArrayList8.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        pexpNode9 = (PExp)nodeArrayList10.get(0);

        pmethoddeclNode1 = new AMethodDecl(ptypeNode2, tidNode3, listNode5, listNode6, listNode8, pexpNode9);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce AAmethoddecl4MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        LinkedList listNode5 = new LinkedList();
        LinkedList listNode7 = new LinkedList();
        LinkedList listNode9 = new LinkedList();
        PExp pexpNode10;
        ptypeNode2 = (PType)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList listNode6 = new LinkedList();
        listNode6 = (LinkedList)nodeArrayList8.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        LinkedList listNode8 = new LinkedList();
        listNode8 = (LinkedList)nodeArrayList9.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        pexpNode10 = (PExp)nodeArrayList11.get(0);

        pmethoddeclNode1 = new AMethodDecl(ptypeNode2, tidNode3, listNode5, listNode7, listNode9, pexpNode10);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce AAfirstparameterparamlist1Paramlist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PParameter pparameterNode1;
        pparameterNode1 = (PParameter)nodeArrayList1.get(0);
	if(pparameterNode1 != null)
	{
	  listNode2.add(pparameterNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce AAfirstparameterparamlist2Paramlist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        PParameter pparameterNode1;
        LinkedList listNode2 = new LinkedList();
        pparameterNode1 = (PParameter)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(pparameterNode1 != null)
	{
	  listNode3.add(pparameterNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce AEmptyParamlist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        LinkedList listNode1 = new LinkedList();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce AAnotherparameterParamrest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParameter pparameterNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        ptypeNode2 = (PType)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);

        pparameterNode1 = new AParameter(ptypeNode2, tidNode3);
        }
	nodeList.add(pparameterNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce AParameter */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParameter pparameterNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pparameterNode1 = new AParameter(ptypeNode2, tidNode3);
        }
	nodeList.add(pparameterNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce AIntvectorType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block

        ptypeNode1 = new AIntArrayType();
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce ABooleanType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block

        ptypeNode1 = new ABooleanType();
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce AIntType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block

        ptypeNode1 = new AIntegerType();
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce AIdType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        ptypeNode1 = new AIdentifierType(tidNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce AStmWithoutTrailingSubstmStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce AIfStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExp pexpNode2;
        PStatement pstatementNode3;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pstatementNode3 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new AIfStatement(pexpNode2, pstatementNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce AIfElseStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExp pexpNode2;
        PStatement pstatementNode3;
        PStatement pstatementNode4;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pstatementNode3 = (PStatement)nodeArrayList5.get(0);
        pstatementNode4 = (PStatement)nodeArrayList7.get(0);

        pstatementNode1 = new AIfElseStatement(pexpNode2, pstatementNode3, pstatementNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce AWhileStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExp pexpNode2;
        PStatement pstatementNode3;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pstatementNode3 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new AWhileStatement(pexpNode2, pstatementNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce AAstatementliststmwithouttrailingsubstm1StmWithoutTrailingSubstm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        }

        pstatementNode1 = new ABlockStatement(listNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce AAstatementliststmwithouttrailingsubstm2StmWithoutTrailingSubstm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pstatementNode1 = new ABlockStatement(listNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce APrintStmWithoutTrailingSubstm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList3.get(0);

        pstatementNode1 = new APrintStatement(pexpNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce AAttrStmWithoutTrailingSubstm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TId tidNode2;
        PExp pexpNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pstatementNode1 = new AAssignStatement(tidNode2, pexpNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce AArrayattrStmWithoutTrailingSubstm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TId tidNode2;
        PExp pexpNode3;
        PExp pexpNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);
        pexpNode4 = (PExp)nodeArrayList6.get(0);

        pstatementNode1 = new AArrayAssignStatement(tidNode2, pexpNode3, pexpNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce AStmWithoutTrailingSubstmStmNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce AWhileNoShortIfStmNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExp pexpNode2;
        PStatement pstatementNode3;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pstatementNode3 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new AWhileStatement(pexpNode2, pstatementNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce AIfElseNoShortIfStmNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExp pexpNode2;
        PStatement pstatementNode3;
        PStatement pstatementNode4;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pstatementNode3 = (PStatement)nodeArrayList5.get(0);
        pstatementNode4 = (PStatement)nodeArrayList7.get(0);

        pstatementNode1 = new AIfElseStatement(pexpNode2, pstatementNode3, pstatementNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce AAndExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AAndExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce ALessThanExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce ALessThanLessThan */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ALessThanExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new40() /* reduce APlusMinusLessThan */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new41() /* reduce APlusPlusMinus */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new APlusExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new42() /* reduce AMinusPlusMinus */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMinusExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new43() /* reduce ATimesPlusMinus */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new44() /* reduce ATimesTimes */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ATimesExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new45() /* reduce ANotexpTimes */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new46() /* reduce ANotexpNotExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new ANotExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new47() /* reduce APostfixexpNotExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new48() /* reduce AArraygetPostfixExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AArrayLookupExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new49() /* reduce AMethodcallPostfixExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TId tidNode3;
        LinkedList listNode5 = new LinkedList();
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pexpNode1 = new ACallExp(pexpNode2, tidNode3, listNode5);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new50() /* reduce ALengthPostfixExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList1.get(0);

        pexpNode1 = new AArrayLengthExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new51() /* reduce APrimaryexpPostfixExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new52() /* reduce ANumberPrimaryExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pexpNode1 = new AIntegerLiteralExp(tnumberNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new53() /* reduce ATruePrimaryExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block

        pexpNode1 = new ATrueExp();
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new54() /* reduce AFalsePrimaryExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block

        pexpNode1 = new AFalseExp();
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new55() /* reduce AIdPrimaryExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pexpNode1 = new AIdentifierExp(tidNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new56() /* reduce AThisPrimaryExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block

        pexpNode1 = new AThisExp();
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new57() /* reduce ANewintarrayPrimaryExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList4.get(0);

        pexpNode1 = new ANewArrayExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new58() /* reduce ANewidPrimaryExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList2.get(0);

        pexpNode1 = new ANewObjectExp(tidNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new59() /* reduce ALparexprparPrimaryExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new AParentheseExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new60() /* reduce AAexplistheadexplist1Explist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	if(pexpNode1 != null)
	{
	  listNode2.add(pexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new61() /* reduce AAexplistheadexplist2Explist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        PExp pexpNode1;
        LinkedList listNode2 = new LinkedList();
        pexpNode1 = (PExp)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(pexpNode1 != null)
	{
	  listNode3.add(pexpNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new62() /* reduce ABlankExplist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        LinkedList listNode1 = new LinkedList();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new63() /* reduce AExprest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList2.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new64() /* reduce ATerminal$ClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PClassDecl pclassdeclNode1;
        pclassdeclNode1 = (PClassDecl)nodeArrayList1.get(0);
	if(pclassdeclNode1 != null)
	{
	  listNode2.add(pclassdeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new65() /* reduce ANonTerminal$ClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PClassDecl pclassdeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pclassdeclNode2 = (PClassDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pclassdeclNode2 != null)
	{
	  listNode3.add(pclassdeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new66() /* reduce ATerminal$VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PVarDecl pvardeclNode1;
        pvardeclNode1 = (PVarDecl)nodeArrayList1.get(0);
	if(pvardeclNode1 != null)
	{
	  listNode2.add(pvardeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new67() /* reduce ANonTerminal$VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PVarDecl pvardeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvardeclNode2 = (PVarDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvardeclNode2 != null)
	{
	  listNode3.add(pvardeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new68() /* reduce ATerminal$MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PMethodDecl pmethoddeclNode1;
        pmethoddeclNode1 = (PMethodDecl)nodeArrayList1.get(0);
	if(pmethoddeclNode1 != null)
	{
	  listNode2.add(pmethoddeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new69() /* reduce ANonTerminal$MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PMethodDecl pmethoddeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmethoddeclNode2 = (PMethodDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmethoddeclNode2 != null)
	{
	  listNode3.add(pmethoddeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new70() /* reduce ATerminal$Statement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	if(pstatementNode1 != null)
	{
	  listNode2.add(pstatementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new71() /* reduce ANonTerminal$Statement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PStatement pstatementNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstatementNode2 = (PStatement)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstatementNode2 != null)
	{
	  listNode3.add(pstatementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new72() /* reduce ATerminal$Paramrest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PParameter pparameterNode1;
        pparameterNode1 = (PParameter)nodeArrayList1.get(0);
	if(pparameterNode1 != null)
	{
	  listNode2.add(pparameterNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new73() /* reduce ANonTerminal$Paramrest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PParameter pparameterNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pparameterNode2 = (PParameter)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pparameterNode2 != null)
	{
	  listNode3.add(pparameterNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new74() /* reduce ATerminal$Exprest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	if(pexpNode1 != null)
	{
	  listNode2.add(pexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new75() /* reduce ANonTerminal$Exprest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PExp pexpNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpNode2 = (PExp)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpNode2 != null)
	{
	  listNode3.add(pexpNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {18, SHIFT, 4}, },
			{{-1, ERROR, 2}, {37, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, {0, SHIFT, 5}, },
			{{-1, ERROR, 4}, {29, SHIFT, 8}, },
			{{-1, ERROR, 5}, {18, SHIFT, 9}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 1}, {0, SHIFT, 5}, },
			{{-1, ERROR, 8}, {2, SHIFT, 11}, },
			{{-1, ERROR, 9}, {1, SHIFT, 12}, {29, SHIFT, 13}, },
			{{-1, REDUCE, 65}, },
			{{-1, ERROR, 11}, {3, SHIFT, 14}, },
			{{-1, ERROR, 12}, {18, SHIFT, 15}, },
			{{-1, ERROR, 13}, {2, SHIFT, 16}, {7, SHIFT, 17}, {8, SHIFT, 18}, {18, SHIFT, 19}, {30, SHIFT, 20}, },
			{{-1, ERROR, 14}, {4, SHIFT, 26}, },
			{{-1, ERROR, 15}, {29, SHIFT, 27}, },
			{{-1, ERROR, 16}, {7, SHIFT, 17}, {8, SHIFT, 18}, {18, SHIFT, 19}, },
			{{-1, REDUCE, 23}, {27, SHIFT, 29}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 68}, },
			{{-1, ERROR, 23}, {18, SHIFT, 30}, },
			{{-1, ERROR, 24}, {2, SHIFT, 16}, {7, SHIFT, 17}, {8, SHIFT, 18}, {18, SHIFT, 19}, {30, SHIFT, 31}, },
			{{-1, ERROR, 25}, {2, SHIFT, 16}, {30, SHIFT, 34}, },
			{{-1, ERROR, 26}, {5, SHIFT, 36}, },
			{{-1, ERROR, 27}, {2, SHIFT, 16}, {7, SHIFT, 17}, {8, SHIFT, 18}, {18, SHIFT, 19}, {30, SHIFT, 37}, },
			{{-1, ERROR, 28}, {18, SHIFT, 40}, },
			{{-1, ERROR, 29}, {28, SHIFT, 41}, },
			{{-1, ERROR, 30}, {34, SHIFT, 42}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 67}, },
			{{-1, ERROR, 33}, {2, SHIFT, 16}, {30, SHIFT, 43}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 69}, },
			{{-1, ERROR, 36}, {31, SHIFT, 44}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 38}, {2, SHIFT, 16}, {7, SHIFT, 17}, {8, SHIFT, 18}, {18, SHIFT, 19}, {30, SHIFT, 45}, },
			{{-1, ERROR, 39}, {2, SHIFT, 16}, {30, SHIFT, 47}, },
			{{-1, ERROR, 40}, {31, SHIFT, 48}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 44}, {6, SHIFT, 49}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 46}, {2, SHIFT, 16}, {30, SHIFT, 50}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 18}, {7, SHIFT, 17}, {8, SHIFT, 18}, {18, SHIFT, 19}, },
			{{-1, ERROR, 49}, {27, SHIFT, 54}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 51}, {32, SHIFT, 55}, },
			{{-1, REDUCE, 16}, {35, SHIFT, 56}, },
			{{-1, ERROR, 53}, {18, SHIFT, 59}, },
			{{-1, ERROR, 54}, {28, SHIFT, 60}, },
			{{-1, ERROR, 55}, {29, SHIFT, 61}, },
			{{-1, ERROR, 56}, {7, SHIFT, 17}, {8, SHIFT, 18}, {18, SHIFT, 19}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 17}, {35, SHIFT, 56}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 60}, {18, SHIFT, 64}, },
			{{-1, ERROR, 61}, {7, SHIFT, 17}, {8, SHIFT, 18}, {9, SHIFT, 65}, {11, SHIFT, 66}, {16, SHIFT, 67}, {18, SHIFT, 68}, {29, SHIFT, 69}, {36, SHIFT, 70}, },
			{{-1, ERROR, 62}, {18, SHIFT, 75}, },
			{{-1, REDUCE, 73}, },
			{{-1, ERROR, 64}, {32, SHIFT, 76}, },
			{{-1, ERROR, 65}, {31, SHIFT, 77}, },
			{{-1, ERROR, 66}, {31, SHIFT, 78}, },
			{{-1, ERROR, 67}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, {19, SHIFT, 84}, {26, SHIFT, 85}, {31, SHIFT, 86}, },
			{{-1, REDUCE, 24}, {25, SHIFT, 94}, {27, SHIFT, 95}, },
			{{-1, ERROR, 69}, {9, SHIFT, 65}, {11, SHIFT, 66}, {18, SHIFT, 96}, {29, SHIFT, 69}, {30, SHIFT, 97}, {36, SHIFT, 70}, },
			{{-1, ERROR, 70}, {31, SHIFT, 99}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 73}, {7, SHIFT, 17}, {8, SHIFT, 18}, {9, SHIFT, 65}, {11, SHIFT, 66}, {16, SHIFT, 100}, {18, SHIFT, 68}, {29, SHIFT, 69}, {36, SHIFT, 70}, },
			{{-1, ERROR, 74}, {9, SHIFT, 65}, {11, SHIFT, 66}, {16, SHIFT, 102}, {18, SHIFT, 96}, {29, SHIFT, 69}, {36, SHIFT, 70}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 76}, {29, SHIFT, 104}, },
			{{-1, ERROR, 77}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, {19, SHIFT, 84}, {26, SHIFT, 85}, {31, SHIFT, 86}, },
			{{-1, ERROR, 78}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, {19, SHIFT, 84}, {26, SHIFT, 85}, {31, SHIFT, 86}, },
			{{-1, ERROR, 79}, {7, SHIFT, 107}, {18, SHIFT, 108}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 85}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, {19, SHIFT, 84}, {26, SHIFT, 85}, {31, SHIFT, 86}, },
			{{-1, ERROR, 86}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, {19, SHIFT, 84}, {26, SHIFT, 85}, {31, SHIFT, 86}, },
			{{-1, ERROR, 87}, {23, SHIFT, 111}, {34, SHIFT, 112}, },
			{{-1, REDUCE, 38}, {24, SHIFT, 113}, },
			{{-1, REDUCE, 40}, {20, SHIFT, 114}, {21, SHIFT, 115}, },
			{{-1, REDUCE, 43}, {22, SHIFT, 116}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 47}, {27, SHIFT, 117}, {33, SHIFT, 118}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 94}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, {19, SHIFT, 84}, {26, SHIFT, 85}, {31, SHIFT, 86}, },
			{{-1, ERROR, 95}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, {19, SHIFT, 84}, {26, SHIFT, 85}, {31, SHIFT, 86}, },
			{{-1, ERROR, 96}, {25, SHIFT, 94}, {27, SHIFT, 95}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 98}, {9, SHIFT, 65}, {11, SHIFT, 66}, {18, SHIFT, 96}, {29, SHIFT, 69}, {30, SHIFT, 121}, {36, SHIFT, 70}, },
			{{-1, ERROR, 99}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, {19, SHIFT, 84}, {26, SHIFT, 85}, {31, SHIFT, 86}, },
			{{-1, ERROR, 100}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, {19, SHIFT, 84}, {26, SHIFT, 85}, {31, SHIFT, 86}, },
			{{-1, ERROR, 101}, {9, SHIFT, 65}, {11, SHIFT, 66}, {16, SHIFT, 124}, {18, SHIFT, 96}, {29, SHIFT, 69}, {36, SHIFT, 70}, },
			{{-1, ERROR, 102}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, {19, SHIFT, 84}, {26, SHIFT, 85}, {31, SHIFT, 86}, },
			{{-1, REDUCE, 71}, },
			{{-1, ERROR, 104}, {9, SHIFT, 65}, {11, SHIFT, 66}, {18, SHIFT, 96}, {29, SHIFT, 69}, {36, SHIFT, 70}, },
			{{-1, ERROR, 105}, {23, SHIFT, 111}, {32, SHIFT, 127}, },
			{{-1, ERROR, 106}, {23, SHIFT, 111}, {32, SHIFT, 128}, },
			{{-1, ERROR, 107}, {27, SHIFT, 129}, },
			{{-1, ERROR, 108}, {31, SHIFT, 130}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 110}, {23, SHIFT, 111}, {32, SHIFT, 131}, },
			{{-1, ERROR, 111}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, {19, SHIFT, 84}, {26, SHIFT, 85}, {31, SHIFT, 86}, },
			{{-1, ERROR, 112}, {30, SHIFT, 133}, },
			{{-1, ERROR, 113}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, {19, SHIFT, 84}, {26, SHIFT, 85}, {31, SHIFT, 86}, },
			{{-1, ERROR, 114}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, {19, SHIFT, 84}, {26, SHIFT, 85}, {31, SHIFT, 86}, },
			{{-1, ERROR, 115}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, {19, SHIFT, 84}, {26, SHIFT, 85}, {31, SHIFT, 86}, },
			{{-1, ERROR, 116}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, {19, SHIFT, 84}, {26, SHIFT, 85}, {31, SHIFT, 86}, },
			{{-1, ERROR, 117}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, {19, SHIFT, 84}, {26, SHIFT, 85}, {31, SHIFT, 86}, },
			{{-1, ERROR, 118}, {12, SHIFT, 139}, {18, SHIFT, 140}, },
			{{-1, ERROR, 119}, {23, SHIFT, 111}, {34, SHIFT, 141}, },
			{{-1, ERROR, 120}, {23, SHIFT, 111}, {28, SHIFT, 142}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 122}, {23, SHIFT, 111}, {32, SHIFT, 143}, },
			{{-1, ERROR, 123}, {23, SHIFT, 111}, {34, SHIFT, 144}, },
			{{-1, ERROR, 124}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, {19, SHIFT, 84}, {26, SHIFT, 85}, {31, SHIFT, 86}, },
			{{-1, ERROR, 125}, {23, SHIFT, 111}, {34, SHIFT, 146}, },
			{{-1, ERROR, 126}, {30, SHIFT, 147}, },
			{{-1, ERROR, 127}, {9, SHIFT, 148}, {11, SHIFT, 149}, {18, SHIFT, 96}, {29, SHIFT, 69}, {36, SHIFT, 70}, },
			{{-1, ERROR, 128}, {9, SHIFT, 65}, {11, SHIFT, 66}, {18, SHIFT, 96}, {29, SHIFT, 69}, {36, SHIFT, 70}, },
			{{-1, ERROR, 129}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, {19, SHIFT, 84}, {26, SHIFT, 85}, {31, SHIFT, 86}, },
			{{-1, ERROR, 130}, {32, SHIFT, 155}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 37}, {24, SHIFT, 113}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 39}, {20, SHIFT, 114}, {21, SHIFT, 115}, },
			{{-1, REDUCE, 41}, {22, SHIFT, 116}, },
			{{-1, REDUCE, 42}, {22, SHIFT, 116}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 138}, {23, SHIFT, 111}, {28, SHIFT, 156}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 140}, {31, SHIFT, 157}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 142}, {25, SHIFT, 158}, },
			{{-1, ERROR, 143}, {34, SHIFT, 159}, },
			{{-1, ERROR, 144}, {30, SHIFT, 160}, },
			{{-1, ERROR, 145}, {23, SHIFT, 111}, {34, SHIFT, 161}, },
			{{-1, ERROR, 146}, {30, SHIFT, 162}, },
			{{-1, ERROR, 147}, {30, SHIFT, 163}, },
			{{-1, ERROR, 148}, {31, SHIFT, 164}, },
			{{-1, ERROR, 149}, {31, SHIFT, 165}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 25}, {10, REDUCE, 34}, },
			{{-1, ERROR, 152}, {10, SHIFT, 166}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 154}, {23, SHIFT, 111}, {28, SHIFT, 167}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 62}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, {19, SHIFT, 84}, {26, SHIFT, 85}, {31, SHIFT, 86}, },
			{{-1, ERROR, 158}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, {19, SHIFT, 84}, {26, SHIFT, 85}, {31, SHIFT, 86}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 161}, {30, SHIFT, 171}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 164}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, {19, SHIFT, 84}, {26, SHIFT, 85}, {31, SHIFT, 86}, },
			{{-1, ERROR, 165}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, {19, SHIFT, 84}, {26, SHIFT, 85}, {31, SHIFT, 86}, },
			{{-1, ERROR, 166}, {9, SHIFT, 65}, {11, SHIFT, 66}, {18, SHIFT, 96}, {29, SHIFT, 69}, {36, SHIFT, 70}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 60}, {23, SHIFT, 111}, {35, SHIFT, 175}, },
			{{-1, ERROR, 169}, {32, SHIFT, 178}, },
			{{-1, ERROR, 170}, {23, SHIFT, 111}, {34, SHIFT, 179}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 172}, {23, SHIFT, 111}, {32, SHIFT, 180}, },
			{{-1, ERROR, 173}, {23, SHIFT, 111}, {32, SHIFT, 181}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 175}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, {19, SHIFT, 84}, {26, SHIFT, 85}, {31, SHIFT, 86}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 61}, {35, SHIFT, 175}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 180}, {9, SHIFT, 148}, {11, SHIFT, 149}, {18, SHIFT, 96}, {29, SHIFT, 69}, {36, SHIFT, 70}, },
			{{-1, ERROR, 181}, {9, SHIFT, 148}, {11, SHIFT, 149}, {18, SHIFT, 96}, {29, SHIFT, 69}, {36, SHIFT, 70}, },
			{{-1, REDUCE, 63}, {23, SHIFT, 111}, },
			{{-1, REDUCE, 75}, },
			{{-1, ERROR, 184}, {10, SHIFT, 186}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 186}, {9, SHIFT, 148}, {11, SHIFT, 149}, {18, SHIFT, 96}, {29, SHIFT, 69}, {36, SHIFT, 70}, },
			{{-1, REDUCE, 36}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, },
			{{-1, 6}, {7, 10}, },
			{{-1, 21}, {24, 32}, {38, 32}, {73, 32}, },
			{{-1, 22}, {25, 35}, {33, 35}, {39, 35}, {46, 35}, },
			{{-1, 51}, },
			{{-1, 57}, {58, 63}, },
			{{-1, 52}, },
			{{-1, 23}, {16, 28}, {48, 53}, {56, 62}, },
			{{-1, 71}, {74, 103}, {98, 103}, {101, 103}, {104, 126}, {127, 150}, {128, 153}, {166, 174}, {180, 150}, {181, 153}, {186, 174}, },
			{{-1, 72}, {127, 151}, {180, 151}, {181, 151}, {186, 151}, },
			{{-1, 152}, {180, 184}, {181, 185}, {186, 187}, },
			{{-1, 87}, {77, 105}, {78, 106}, {86, 110}, {94, 119}, {95, 120}, {99, 122}, {100, 123}, {102, 125}, {117, 138}, {124, 145}, {129, 154}, {157, 168}, {158, 170}, {164, 172}, {165, 173}, {175, 182}, },
			{{-1, 88}, {111, 132}, },
			{{-1, 89}, {113, 134}, },
			{{-1, 90}, {114, 135}, {115, 136}, },
			{{-1, 91}, {85, 109}, {116, 137}, },
			{{-1, 92}, },
			{{-1, 93}, },
			{{-1, 169}, },
			{{-1, 176}, {177, 183}, },
			{{-1, 7}, },
			{{-1, 24}, {27, 38}, {61, 73}, },
			{{-1, 25}, {24, 33}, {27, 39}, {38, 46}, },
			{{-1, 74}, {69, 98}, {73, 101}, },
			{{-1, 58}, },
			{{-1, 177}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'class'",
			"expecting: id",
			"expecting: EOF",
			"expecting: 'class', EOF",
			"expecting: '{'",
			"expecting: 'public'",
			"expecting: 'extends', '{'",
			"expecting: 'static'",
			"expecting: 'public', 'int', 'boolean', id, '}'",
			"expecting: 'void'",
			"expecting: 'int', 'boolean', id",
			"expecting: id, '['",
			"expecting: 'public', 'int', 'boolean', 'if', 'while', 'return', id, '{', '}', 'System.out.println'",
			"expecting: 'public', '}'",
			"expecting: 'main'",
			"expecting: ']'",
			"expecting: ';'",
			"expecting: '('",
			"expecting: 'String'",
			"expecting: 'int', 'boolean', id, ')'",
			"expecting: '['",
			"expecting: ')'",
			"expecting: ')', ','",
			"expecting: 'int', 'boolean', 'if', 'while', 'return', id, '{', 'System.out.println'",
			"expecting: 'new', 'true', 'false', 'this', id, number, '!', '('",
			"expecting: id, '=', '['",
			"expecting: 'if', 'while', id, '{', '}', 'System.out.println'",
			"expecting: 'if', 'while', 'return', id, '{', '}', 'System.out.println'",
			"expecting: 'if', 'while', 'return', id, '{', 'System.out.println'",
			"expecting: 'int', id",
			"expecting: '+', '-', '*', '&&', '<', '[', ']', ')', '.', ';', ','",
			"expecting: '&&', ';'",
			"expecting: '&&', '<', ']', ')', ';', ','",
			"expecting: '+', '-', '&&', '<', ']', ')', ';', ','",
			"expecting: '+', '-', '*', '&&', '<', ']', ')', ';', ','",
			"expecting: '=', '['",
			"expecting: 'if', 'else', 'while', 'return', id, '{', '}', 'System.out.println'",
			"expecting: 'if', 'while', id, '{', 'System.out.println'",
			"expecting: '&&', ')'",
			"expecting: '}'",
			"expecting: 'length', id",
			"expecting: '&&', ']'",
			"expecting: '='",
			"expecting: 'else'",
			"expecting: 'new', 'true', 'false', 'this', id, number, '!', '(', ')'",
			"expecting: '&&', ')', ','",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 1, 3, 3, 5, 6, 3, 7, 1, 8, 9, 4, 10, 11, 1, 1, 3, 12, 13, 1, 8, 13, 14, 8, 1, 15, 16, 3, 12, 13, 3, 13, 17, 3, 8, 13, 17, 1, 12, 3, 18, 3, 13, 3, 19, 20, 3, 21, 22, 1, 15, 4, 10, 22, 22, 22, 1, 23, 1, 22, 21, 17, 17, 24, 25, 26, 17, 27, 27, 23, 28, 22, 4, 24, 24, 29, 30, 30, 30, 30, 30, 24, 24, 31, 32, 33, 34, 34, 30, 30, 24, 24, 35, 36, 26, 24, 24, 28, 24, 27, 37, 38, 38, 20, 17, 34, 38, 24, 39, 24, 24, 24, 24, 24, 40, 31, 41, 36, 38, 31, 24, 31, 39, 37, 37, 24, 21, 30, 32, 13, 33, 34, 34, 34, 41, 30, 17, 36, 42, 16, 39, 31, 39, 39, 17, 17, 27, 36, 43, 27, 41, 30, 30, 44, 24, 36, 13, 39, 13, 3, 24, 24, 37, 30, 45, 21, 31, 13, 38, 38, 27, 24, 22, 22, 30, 36, 37, 37, 45, 22, 43, 43, 37, 43, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
