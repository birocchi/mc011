/* This file was generated by SableCC (http://www.sablecc.org/). */

package parser;

import lexer.*;
import node.*;
import analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AAprogram1Program */
		    {
			ArrayList list = new0();
			push(goTo(0), list);
		    }
		    break;
                    case 1: /* reduce AAprogram2Program */
		    {
			ArrayList list = new1();
			push(goTo(0), list);
		    }
		    break;
                    case 2: /* reduce AMainclass */
		    {
			ArrayList list = new2();
			push(goTo(1), list);
		    }
		    break;
                    case 3: /* reduce AMainmethod */
		    {
			ArrayList list = new3();
			push(goTo(2), list);
		    }
		    break;
                    case 4: /* reduce AAsimpleclassclassdecl1Classdecl */
		    {
			ArrayList list = new4();
			push(goTo(3), list);
		    }
		    break;
                    case 5: /* reduce AAsimpleclassclassdecl2Classdecl */
		    {
			ArrayList list = new5();
			push(goTo(3), list);
		    }
		    break;
                    case 6: /* reduce AAsimpleclassclassdecl3Classdecl */
		    {
			ArrayList list = new6();
			push(goTo(3), list);
		    }
		    break;
                    case 7: /* reduce AAsimpleclassclassdecl4Classdecl */
		    {
			ArrayList list = new7();
			push(goTo(3), list);
		    }
		    break;
                    case 8: /* reduce AAextendingclassclassdecl1Classdecl */
		    {
			ArrayList list = new8();
			push(goTo(3), list);
		    }
		    break;
                    case 9: /* reduce AAextendingclassclassdecl2Classdecl */
		    {
			ArrayList list = new9();
			push(goTo(3), list);
		    }
		    break;
                    case 10: /* reduce AAextendingclassclassdecl3Classdecl */
		    {
			ArrayList list = new10();
			push(goTo(3), list);
		    }
		    break;
                    case 11: /* reduce AAextendingclassclassdecl4Classdecl */
		    {
			ArrayList list = new11();
			push(goTo(3), list);
		    }
		    break;
                    case 12: /* reduce AVardecl */
		    {
			ArrayList list = new12();
			push(goTo(4), list);
		    }
		    break;
                    case 13: /* reduce AAmethoddecl1Methoddecl */
		    {
			ArrayList list = new13();
			push(goTo(5), list);
		    }
		    break;
                    case 14: /* reduce AAmethoddecl2Methoddecl */
		    {
			ArrayList list = new14();
			push(goTo(5), list);
		    }
		    break;
                    case 15: /* reduce AAmethoddecl3Methoddecl */
		    {
			ArrayList list = new15();
			push(goTo(5), list);
		    }
		    break;
                    case 16: /* reduce AAmethoddecl4Methoddecl */
		    {
			ArrayList list = new16();
			push(goTo(5), list);
		    }
		    break;
                    case 17: /* reduce AAfirstparameterparamlist1Paramlist */
		    {
			ArrayList list = new17();
			push(goTo(6), list);
		    }
		    break;
                    case 18: /* reduce AAfirstparameterparamlist2Paramlist */
		    {
			ArrayList list = new18();
			push(goTo(6), list);
		    }
		    break;
                    case 19: /* reduce AEmptyParamlist */
		    {
			ArrayList list = new19();
			push(goTo(6), list);
		    }
		    break;
                    case 20: /* reduce AAnotherparameterParamrest */
		    {
			ArrayList list = new20();
			push(goTo(7), list);
		    }
		    break;
                    case 21: /* reduce AParameter */
		    {
			ArrayList list = new21();
			push(goTo(8), list);
		    }
		    break;
                    case 22: /* reduce AIntvectorType */
		    {
			ArrayList list = new22();
			push(goTo(9), list);
		    }
		    break;
                    case 23: /* reduce ABooleanType */
		    {
			ArrayList list = new23();
			push(goTo(9), list);
		    }
		    break;
                    case 24: /* reduce AIntType */
		    {
			ArrayList list = new24();
			push(goTo(9), list);
		    }
		    break;
                    case 25: /* reduce AIdType */
		    {
			ArrayList list = new25();
			push(goTo(9), list);
		    }
		    break;
                    case 26: /* reduce AAstatementliststatement1Statement */
		    {
			ArrayList list = new26();
			push(goTo(10), list);
		    }
		    break;
                    case 27: /* reduce AAstatementliststatement2Statement */
		    {
			ArrayList list = new27();
			push(goTo(10), list);
		    }
		    break;
                    case 28: /* reduce AIfelseStatement */
		    {
			ArrayList list = new28();
			push(goTo(10), list);
		    }
		    break;
                    case 29: /* reduce AWhileStatement */
		    {
			ArrayList list = new29();
			push(goTo(10), list);
		    }
		    break;
                    case 30: /* reduce APrintStatement */
		    {
			ArrayList list = new30();
			push(goTo(10), list);
		    }
		    break;
                    case 31: /* reduce AAttrStatement */
		    {
			ArrayList list = new31();
			push(goTo(10), list);
		    }
		    break;
                    case 32: /* reduce AArrayattrStatement */
		    {
			ArrayList list = new32();
			push(goTo(10), list);
		    }
		    break;
                    case 33: /* reduce AAndExp */
		    {
			ArrayList list = new33();
			push(goTo(11), list);
		    }
		    break;
                    case 34: /* reduce AAandstmlist1AndstmList */
		    {
			ArrayList list = new34();
			push(goTo(12), list);
		    }
		    break;
                    case 35: /* reduce AAandstmlist2AndstmList */
		    {
			ArrayList list = new35();
			push(goTo(12), list);
		    }
		    break;
                    case 36: /* reduce AAndstmRest */
		    {
			ArrayList list = new36();
			push(goTo(13), list);
		    }
		    break;
                    case 37: /* reduce AAlessthan1LessThan */
		    {
			ArrayList list = new37();
			push(goTo(14), list);
		    }
		    break;
                    case 38: /* reduce AAlessthan2LessThan */
		    {
			ArrayList list = new38();
			push(goTo(14), list);
		    }
		    break;
                    case 39: /* reduce ALessThanPlusMinus */
		    {
			ArrayList list = new39();
			push(goTo(15), list);
		    }
		    break;
                    case 40: /* reduce APlusList$Apluslist21PlusMinusList */
		    {
			ArrayList list = new40();
			push(goTo(16), list);
		    }
		    break;
                    case 41: /* reduce AMinusList$Aminuslist11PlusMinusList */
		    {
			ArrayList list = new41();
			push(goTo(16), list);
		    }
		    break;
                    case 42: /* reduce AMinusList$Aminuslist21PlusMinusList */
		    {
			ArrayList list = new42();
			push(goTo(16), list);
		    }
		    break;
                    case 43: /* reduce APlusRest */
		    {
			ArrayList list = new43();
			push(goTo(17), list);
		    }
		    break;
                    case 44: /* reduce AMinusRest */
		    {
			ArrayList list = new44();
			push(goTo(18), list);
		    }
		    break;
                    case 45: /* reduce AAtimeslist1TimesList */
		    {
			ArrayList list = new45();
			push(goTo(19), list);
		    }
		    break;
                    case 46: /* reduce AAtimeslist2TimesList */
		    {
			ArrayList list = new46();
			push(goTo(19), list);
		    }
		    break;
                    case 47: /* reduce ATimesRest */
		    {
			ArrayList list = new47();
			push(goTo(20), list);
		    }
		    break;
                    case 48: /* reduce ANotExpressionPrefixexp */
		    {
			ArrayList list = new48();
			push(goTo(21), list);
		    }
		    break;
                    case 49: /* reduce AExpressionPrefixexp */
		    {
			ArrayList list = new49();
			push(goTo(21), list);
		    }
		    break;
                    case 50: /* reduce ANotexp */
		    {
			ArrayList list = new50();
			push(goTo(22), list);
		    }
		    break;
                    case 51: /* reduce AApostfixexplist1PostfixexpList */
		    {
			ArrayList list = new51();
			push(goTo(23), list);
		    }
		    break;
                    case 52: /* reduce AApostfixexplist2PostfixexpList */
		    {
			ArrayList list = new52();
			push(goTo(23), list);
		    }
		    break;
                    case 53: /* reduce AIndexPostfixexpRest */
		    {
			ArrayList list = new53();
			push(goTo(24), list);
		    }
		    break;
                    case 54: /* reduce AMethodcallPostfixexpRest */
		    {
			ArrayList list = new54();
			push(goTo(24), list);
		    }
		    break;
                    case 55: /* reduce ALengthPostfixexpRest */
		    {
			ArrayList list = new55();
			push(goTo(24), list);
		    }
		    break;
                    case 56: /* reduce ANumberPrimaryExp */
		    {
			ArrayList list = new56();
			push(goTo(25), list);
		    }
		    break;
                    case 57: /* reduce ATruePrimaryExp */
		    {
			ArrayList list = new57();
			push(goTo(25), list);
		    }
		    break;
                    case 58: /* reduce AFalsePrimaryExp */
		    {
			ArrayList list = new58();
			push(goTo(25), list);
		    }
		    break;
                    case 59: /* reduce AIdPrimaryExp */
		    {
			ArrayList list = new59();
			push(goTo(25), list);
		    }
		    break;
                    case 60: /* reduce AThisPrimaryExp */
		    {
			ArrayList list = new60();
			push(goTo(25), list);
		    }
		    break;
                    case 61: /* reduce ANewintarrayPrimaryExp */
		    {
			ArrayList list = new61();
			push(goTo(25), list);
		    }
		    break;
                    case 62: /* reduce ANewidPrimaryExp */
		    {
			ArrayList list = new62();
			push(goTo(25), list);
		    }
		    break;
                    case 63: /* reduce ALparexprparPrimaryExp */
		    {
			ArrayList list = new63();
			push(goTo(25), list);
		    }
		    break;
                    case 64: /* reduce AAexplistheadexplist1Explist */
		    {
			ArrayList list = new64();
			push(goTo(26), list);
		    }
		    break;
                    case 65: /* reduce AAexplistheadexplist2Explist */
		    {
			ArrayList list = new65();
			push(goTo(26), list);
		    }
		    break;
                    case 66: /* reduce ABlankExplist */
		    {
			ArrayList list = new66();
			push(goTo(26), list);
		    }
		    break;
                    case 67: /* reduce AExprest */
		    {
			ArrayList list = new67();
			push(goTo(27), list);
		    }
		    break;
                    case 68: /* reduce ATerminal$Classdecl */
		    {
			ArrayList list = new68();
			push(goTo(28), list);
		    }
		    break;
                    case 69: /* reduce ANonTerminal$Classdecl */
		    {
			ArrayList list = new69();
			push(goTo(28), list);
		    }
		    break;
                    case 70: /* reduce ATerminal$Vardecl */
		    {
			ArrayList list = new70();
			push(goTo(29), list);
		    }
		    break;
                    case 71: /* reduce ANonTerminal$Vardecl */
		    {
			ArrayList list = new71();
			push(goTo(29), list);
		    }
		    break;
                    case 72: /* reduce ATerminal$Methoddecl */
		    {
			ArrayList list = new72();
			push(goTo(30), list);
		    }
		    break;
                    case 73: /* reduce ANonTerminal$Methoddecl */
		    {
			ArrayList list = new73();
			push(goTo(30), list);
		    }
		    break;
                    case 74: /* reduce ATerminal$Statement */
		    {
			ArrayList list = new74();
			push(goTo(31), list);
		    }
		    break;
                    case 75: /* reduce ANonTerminal$Statement */
		    {
			ArrayList list = new75();
			push(goTo(31), list);
		    }
		    break;
                    case 76: /* reduce ATerminal$Paramrest */
		    {
			ArrayList list = new76();
			push(goTo(32), list);
		    }
		    break;
                    case 77: /* reduce ANonTerminal$Paramrest */
		    {
			ArrayList list = new77();
			push(goTo(32), list);
		    }
		    break;
                    case 78: /* reduce ATerminal$AndstmRest */
		    {
			ArrayList list = new78();
			push(goTo(33), list);
		    }
		    break;
                    case 79: /* reduce ANonTerminal$AndstmRest */
		    {
			ArrayList list = new79();
			push(goTo(33), list);
		    }
		    break;
                    case 80: /* reduce ATerminal$PlusRest */
		    {
			ArrayList list = new80();
			push(goTo(34), list);
		    }
		    break;
                    case 81: /* reduce ANonTerminal$PlusRest */
		    {
			ArrayList list = new81();
			push(goTo(34), list);
		    }
		    break;
                    case 82: /* reduce ATerminal$MinusRest */
		    {
			ArrayList list = new82();
			push(goTo(35), list);
		    }
		    break;
                    case 83: /* reduce ANonTerminal$MinusRest */
		    {
			ArrayList list = new83();
			push(goTo(35), list);
		    }
		    break;
                    case 84: /* reduce ATerminal$TimesRest */
		    {
			ArrayList list = new84();
			push(goTo(36), list);
		    }
		    break;
                    case 85: /* reduce ANonTerminal$TimesRest */
		    {
			ArrayList list = new85();
			push(goTo(36), list);
		    }
		    break;
                    case 86: /* reduce ATerminal$PostfixexpRest */
		    {
			ArrayList list = new86();
			push(goTo(37), list);
		    }
		    break;
                    case 87: /* reduce ANonTerminal$PostfixexpRest */
		    {
			ArrayList list = new87();
			push(goTo(37), list);
		    }
		    break;
                    case 88: /* reduce ATerminal$Exprest */
		    {
			ArrayList list = new88();
			push(goTo(38), list);
		    }
		    break;
                    case 89: /* reduce ANonTerminal$Exprest */
		    {
			ArrayList list = new89();
			push(goTo(38), list);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AAprogram1Program */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PMainclass pmainclassNode2;
        LinkedList listNode3 = new LinkedList();
        pmainclassNode2 = (PMainclass)nodeArrayList1.get(0);
        {
            // Block
        }

        pprogramNode1 = new AProgram(pmainclassNode2, listNode3);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AAprogram2Program */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PMainclass pmainclassNode2;
        LinkedList listNode4 = new LinkedList();
        pmainclassNode2 = (PMainclass)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pprogramNode1 = new AProgram(pmainclassNode2, listNode4);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AMainclass */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMainclass pmainclassNode1;
        {
            // Block
        TId tidNode2;
        PMainmethod pmainmethodNode3;
        tidNode2 = (TId)nodeArrayList2.get(0);
        pmainmethodNode3 = (PMainmethod)nodeArrayList4.get(0);

        pmainclassNode1 = new AMainclass(tidNode2, pmainmethodNode3);
        }
	nodeList.add(pmainclassNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AMainmethod */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMainmethod pmainmethodNode1;
        {
            // Block
        TId tidNode2;
        PStatement pstatementNode3;
        tidNode2 = (TId)nodeArrayList9.get(0);
        pstatementNode3 = (PStatement)nodeArrayList12.get(0);

        pmainmethodNode1 = new AMainmethod(tidNode2, pstatementNode3);
        }
	nodeList.add(pmainmethodNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AAsimpleclassclassdecl1Classdecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassdecl pclassdeclNode1;
        {
            // Block
        TId tidNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList listNode4 = new LinkedList();
        LinkedList listNode5 = new LinkedList();
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        }
        {
            // Block
        }

        pclassdeclNode1 = new AClassdecl(tidNode2, null, listNode4, listNode5);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce AAsimpleclassclassdecl2Classdecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassdecl pclassdeclNode1;
        {
            // Block
        TId tidNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList listNode5 = new LinkedList();
        LinkedList listNode6 = new LinkedList();
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        }

        pclassdeclNode1 = new AClassdecl(tidNode2, null, listNode5, listNode6);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AAsimpleclassclassdecl3Classdecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassdecl pclassdeclNode1;
        {
            // Block
        TId tidNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList listNode4 = new LinkedList();
        LinkedList listNode6 = new LinkedList();
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pclassdeclNode1 = new AClassdecl(tidNode2, null, listNode4, listNode6);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AAsimpleclassclassdecl4Classdecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassdecl pclassdeclNode1;
        {
            // Block
        TId tidNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList listNode5 = new LinkedList();
        LinkedList listNode7 = new LinkedList();
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList listNode6 = new LinkedList();
        listNode6 = (LinkedList)nodeArrayList5.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pclassdeclNode1 = new AClassdecl(tidNode2, null, listNode5, listNode7);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce AAextendingclassclassdecl1Classdecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassdecl pclassdeclNode1;
        {
            // Block
        TId tidNode2;
        TId tidNode3;
        LinkedList listNode4 = new LinkedList();
        LinkedList listNode5 = new LinkedList();
        tidNode2 = (TId)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList4.get(0);
        {
            // Block
        }
        {
            // Block
        }

        pclassdeclNode1 = new AClassdecl(tidNode2, tidNode3, listNode4, listNode5);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce AAextendingclassclassdecl2Classdecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassdecl pclassdeclNode1;
        {
            // Block
        TId tidNode2;
        TId tidNode3;
        LinkedList listNode5 = new LinkedList();
        LinkedList listNode6 = new LinkedList();
        tidNode2 = (TId)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList4.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList6.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        }

        pclassdeclNode1 = new AClassdecl(tidNode2, tidNode3, listNode5, listNode6);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AAextendingclassclassdecl3Classdecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassdecl pclassdeclNode1;
        {
            // Block
        TId tidNode2;
        TId tidNode3;
        LinkedList listNode4 = new LinkedList();
        LinkedList listNode6 = new LinkedList();
        tidNode2 = (TId)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList4.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList6.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pclassdeclNode1 = new AClassdecl(tidNode2, tidNode3, listNode4, listNode6);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce AAextendingclassclassdecl4Classdecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassdecl pclassdeclNode1;
        {
            // Block
        TId tidNode2;
        TId tidNode3;
        LinkedList listNode5 = new LinkedList();
        LinkedList listNode7 = new LinkedList();
        tidNode2 = (TId)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList4.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList6.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList listNode6 = new LinkedList();
        listNode6 = (LinkedList)nodeArrayList7.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pclassdeclNode1 = new AClassdecl(tidNode2, tidNode3, listNode5, listNode7);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AVardecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVardecl pvardeclNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pvardeclNode1 = new AVardecl(ptypeNode2, tidNode3);
        }
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AAmethoddecl1Methoddecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethoddecl pmethoddeclNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        LinkedList listNode5 = new LinkedList();
        LinkedList listNode6 = new LinkedList();
        LinkedList listNode7 = new LinkedList();
        PExp pexpNode8;
        ptypeNode2 = (PType)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        }
        {
            // Block
        }
        pexpNode8 = (PExp)nodeArrayList9.get(0);

        pmethoddeclNode1 = new AMethoddecl(ptypeNode2, tidNode3, listNode5, listNode6, listNode7, pexpNode8);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce AAmethoddecl2Methoddecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethoddecl pmethoddeclNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        LinkedList listNode5 = new LinkedList();
        LinkedList listNode7 = new LinkedList();
        LinkedList listNode8 = new LinkedList();
        PExp pexpNode9;
        ptypeNode2 = (PType)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList listNode6 = new LinkedList();
        listNode6 = (LinkedList)nodeArrayList8.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        }
        pexpNode9 = (PExp)nodeArrayList10.get(0);

        pmethoddeclNode1 = new AMethoddecl(ptypeNode2, tidNode3, listNode5, listNode7, listNode8, pexpNode9);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce AAmethoddecl3Methoddecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethoddecl pmethoddeclNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        LinkedList listNode5 = new LinkedList();
        LinkedList listNode6 = new LinkedList();
        LinkedList listNode8 = new LinkedList();
        PExp pexpNode9;
        ptypeNode2 = (PType)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        }
        {
            // Block
        LinkedList listNode7 = new LinkedList();
        listNode7 = (LinkedList)nodeArrayList8.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        pexpNode9 = (PExp)nodeArrayList10.get(0);

        pmethoddeclNode1 = new AMethoddecl(ptypeNode2, tidNode3, listNode5, listNode6, listNode8, pexpNode9);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce AAmethoddecl4Methoddecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethoddecl pmethoddeclNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        LinkedList listNode5 = new LinkedList();
        LinkedList listNode7 = new LinkedList();
        LinkedList listNode9 = new LinkedList();
        PExp pexpNode10;
        ptypeNode2 = (PType)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList listNode6 = new LinkedList();
        listNode6 = (LinkedList)nodeArrayList8.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        LinkedList listNode8 = new LinkedList();
        listNode8 = (LinkedList)nodeArrayList9.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        pexpNode10 = (PExp)nodeArrayList11.get(0);

        pmethoddeclNode1 = new AMethoddecl(ptypeNode2, tidNode3, listNode5, listNode7, listNode9, pexpNode10);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce AAfirstparameterparamlist1Paramlist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PParameter pparameterNode1;
        pparameterNode1 = (PParameter)nodeArrayList1.get(0);
	if(pparameterNode1 != null)
	{
	  listNode2.add(pparameterNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce AAfirstparameterparamlist2Paramlist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        PParameter pparameterNode1;
        LinkedList listNode2 = new LinkedList();
        pparameterNode1 = (PParameter)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(pparameterNode1 != null)
	{
	  listNode3.add(pparameterNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce AEmptyParamlist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        LinkedList listNode1 = new LinkedList();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce AAnotherparameterParamrest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParameter pparameterNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        ptypeNode2 = (PType)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);

        pparameterNode1 = new AParameter(ptypeNode2, tidNode3);
        }
	nodeList.add(pparameterNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce AParameter */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParameter pparameterNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pparameterNode1 = new AParameter(ptypeNode2, tidNode3);
        }
	nodeList.add(pparameterNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce AIntvectorType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block

        ptypeNode1 = new AIntvectorType();
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce ABooleanType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block

        ptypeNode1 = new ABooleanType();
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce AIntType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block

        ptypeNode1 = new AIntType();
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce AIdType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        ptypeNode1 = new AIdType(tidNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce AAstatementliststatement1Statement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        }

        pstatementNode1 = new AStatementlistStatement(listNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce AAstatementliststatement2Statement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pstatementNode1 = new AStatementlistStatement(listNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce AIfelseStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExp pexpNode2;
        PStatement pstatementNode3;
        PStatement pstatementNode4;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pstatementNode3 = (PStatement)nodeArrayList5.get(0);
        pstatementNode4 = (PStatement)nodeArrayList7.get(0);

        pstatementNode1 = new AIfelseStatement(pexpNode2, pstatementNode3, pstatementNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce AWhileStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExp pexpNode2;
        PStatement pstatementNode3;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pstatementNode3 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new AWhileStatement(pexpNode2, pstatementNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce APrintStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList3.get(0);

        pstatementNode1 = new APrintStatement(pexpNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce AAttrStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TId tidNode2;
        PExp pexpNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pstatementNode1 = new AAttrStatement(tidNode2, pexpNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce AArrayattrStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TId tidNode2;
        PExp pexpNode3;
        PExp pexpNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);
        pexpNode4 = (PExp)nodeArrayList6.get(0);

        pstatementNode1 = new AArrayattrStatement(tidNode2, pexpNode3, pexpNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce AAndExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pexpNode1 = new AAndExp(listNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce AAandstmlist1AndstmList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	if(pexpNode1 != null)
	{
	  listNode2.add(pexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce AAandstmlist2AndstmList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        PExp pexpNode1;
        LinkedList listNode2 = new LinkedList();
        pexpNode1 = (PExp)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(pexpNode1 != null)
	{
	  listNode3.add(pexpNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce AAndstmRest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList2.get(0);
	if(pexpNode1 != null)
	{
	  listNode2.add(pexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce AAlessthan1LessThan */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
	if(pexpNode2 != null)
	{
	  listNode3.add(pexpNode2);
	}
        }

        pexpNode1 = new ALessExp(listNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce AAlessthan2LessThan */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
	if(pexpNode2 != null)
	{
	  listNode4.add(pexpNode2);
	}
	if(pexpNode3 != null)
	{
	  listNode4.add(pexpNode3);
	}
        }

        pexpNode1 = new ALessExp(listNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce ALessThanPlusMinus */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList2.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new40() /* reduce APlusList$Apluslist21PlusMinusList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        {
            // Block
        PExp pexpNode2;
        LinkedList listNode3 = new LinkedList();
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(pexpNode2 != null)
	{
	  listNode4.add(pexpNode2);
	}
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexpNode1 = new AAddExp(listNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new41() /* reduce AMinusList$Aminuslist11PlusMinusList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
	if(pexpNode2 != null)
	{
	  listNode3.add(pexpNode2);
	}
        }

        pexpNode1 = new ASubExp(listNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new42() /* reduce AMinusList$Aminuslist21PlusMinusList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        {
            // Block
        PExp pexpNode2;
        LinkedList listNode3 = new LinkedList();
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(pexpNode2 != null)
	{
	  listNode4.add(pexpNode2);
	}
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexpNode1 = new ASubExp(listNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new43() /* reduce APlusRest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList2.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new44() /* reduce AMinusRest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList2.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new45() /* reduce AAtimeslist1TimesList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
	if(pexpNode2 != null)
	{
	  listNode3.add(pexpNode2);
	}
        }

        pexpNode1 = new AMulExp(listNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new46() /* reduce AAtimeslist2TimesList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        {
            // Block
        PExp pexpNode2;
        LinkedList listNode3 = new LinkedList();
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(pexpNode2 != null)
	{
	  listNode4.add(pexpNode2);
	}
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexpNode1 = new AMulExp(listNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new47() /* reduce ATimesRest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList2.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new48() /* reduce ANotExpressionPrefixexp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new49() /* reduce AExpressionPrefixexp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new50() /* reduce ANotexp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new ANotexpExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new51() /* reduce AApostfixexplist1PostfixexpList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        LinkedList listNode3 = new LinkedList();
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        {
            // Block
        }

        pexpNode1 = new APreposExp(pexpNode2, listNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new52() /* reduce AApostfixexplist2PostfixexpList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        LinkedList listNode4 = new LinkedList();
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexpNode1 = new APreposExp(pexpNode2, listNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new53() /* reduce AIndexPostfixexpRest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList2.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new54() /* reduce AMethodcallPostfixexpRest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TId tidNode2;
        LinkedList listNode4 = new LinkedList();
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexpNode1 = new AMethodcallExp(tidNode2, listNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new55() /* reduce ALengthPostfixexpRest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block

        pexpNode1 = new ALengthExp();
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new56() /* reduce ANumberPrimaryExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pexpNode1 = new ANumberExp(tnumberNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new57() /* reduce ATruePrimaryExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block

        pexpNode1 = new ATrueExp();
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new58() /* reduce AFalsePrimaryExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block

        pexpNode1 = new AFalseExp();
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new59() /* reduce AIdPrimaryExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pexpNode1 = new AIdExp(tidNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new60() /* reduce AThisPrimaryExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block

        pexpNode1 = new AThisExp();
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new61() /* reduce ANewintarrayPrimaryExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList4.get(0);

        pexpNode1 = new ANewintarrayExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new62() /* reduce ANewidPrimaryExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList2.get(0);

        pexpNode1 = new ANewidExp(tidNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new63() /* reduce ALparexprparPrimaryExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new ALparexprparExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new64() /* reduce AAexplistheadexplist1Explist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	if(pexpNode1 != null)
	{
	  listNode2.add(pexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new65() /* reduce AAexplistheadexplist2Explist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        PExp pexpNode1;
        LinkedList listNode2 = new LinkedList();
        pexpNode1 = (PExp)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(pexpNode1 != null)
	{
	  listNode3.add(pexpNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new66() /* reduce ABlankExplist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        LinkedList listNode1 = new LinkedList();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new67() /* reduce AExprest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList2.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new68() /* reduce ATerminal$Classdecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PClassdecl pclassdeclNode1;
        pclassdeclNode1 = (PClassdecl)nodeArrayList1.get(0);
	if(pclassdeclNode1 != null)
	{
	  listNode2.add(pclassdeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new69() /* reduce ANonTerminal$Classdecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PClassdecl pclassdeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pclassdeclNode2 = (PClassdecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pclassdeclNode2 != null)
	{
	  listNode3.add(pclassdeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new70() /* reduce ATerminal$Vardecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PVardecl pvardeclNode1;
        pvardeclNode1 = (PVardecl)nodeArrayList1.get(0);
	if(pvardeclNode1 != null)
	{
	  listNode2.add(pvardeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new71() /* reduce ANonTerminal$Vardecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PVardecl pvardeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvardeclNode2 = (PVardecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvardeclNode2 != null)
	{
	  listNode3.add(pvardeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new72() /* reduce ATerminal$Methoddecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PMethoddecl pmethoddeclNode1;
        pmethoddeclNode1 = (PMethoddecl)nodeArrayList1.get(0);
	if(pmethoddeclNode1 != null)
	{
	  listNode2.add(pmethoddeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new73() /* reduce ANonTerminal$Methoddecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PMethoddecl pmethoddeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmethoddeclNode2 = (PMethoddecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmethoddeclNode2 != null)
	{
	  listNode3.add(pmethoddeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new74() /* reduce ATerminal$Statement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	if(pstatementNode1 != null)
	{
	  listNode2.add(pstatementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new75() /* reduce ANonTerminal$Statement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PStatement pstatementNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstatementNode2 = (PStatement)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstatementNode2 != null)
	{
	  listNode3.add(pstatementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new76() /* reduce ATerminal$Paramrest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PParameter pparameterNode1;
        pparameterNode1 = (PParameter)nodeArrayList1.get(0);
	if(pparameterNode1 != null)
	{
	  listNode2.add(pparameterNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new77() /* reduce ANonTerminal$Paramrest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PParameter pparameterNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pparameterNode2 = (PParameter)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pparameterNode2 != null)
	{
	  listNode3.add(pparameterNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new78() /* reduce ATerminal$AndstmRest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        listNode1 = (LinkedList)nodeArrayList1.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new79() /* reduce ANonTerminal$AndstmRest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        LinkedList listNode2 = new LinkedList();
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new80() /* reduce ATerminal$PlusRest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	if(pexpNode1 != null)
	{
	  listNode2.add(pexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new81() /* reduce ANonTerminal$PlusRest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PExp pexpNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpNode2 = (PExp)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpNode2 != null)
	{
	  listNode3.add(pexpNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new82() /* reduce ATerminal$MinusRest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	if(pexpNode1 != null)
	{
	  listNode2.add(pexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new83() /* reduce ANonTerminal$MinusRest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PExp pexpNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpNode2 = (PExp)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpNode2 != null)
	{
	  listNode3.add(pexpNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new84() /* reduce ATerminal$TimesRest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	if(pexpNode1 != null)
	{
	  listNode2.add(pexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new85() /* reduce ANonTerminal$TimesRest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PExp pexpNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpNode2 = (PExp)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpNode2 != null)
	{
	  listNode3.add(pexpNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new86() /* reduce ATerminal$PostfixexpRest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	if(pexpNode1 != null)
	{
	  listNode2.add(pexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new87() /* reduce ANonTerminal$PostfixexpRest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PExp pexpNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpNode2 = (PExp)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpNode2 != null)
	{
	  listNode3.add(pexpNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new88() /* reduce ATerminal$Exprest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	if(pexpNode1 != null)
	{
	  listNode2.add(pexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new89() /* reduce ANonTerminal$Exprest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PExp pexpNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpNode2 = (PExp)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpNode2 != null)
	{
	  listNode3.add(pexpNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {18, SHIFT, 4}, },
			{{-1, ERROR, 2}, {38, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, {0, SHIFT, 5}, },
			{{-1, ERROR, 4}, {30, SHIFT, 8}, },
			{{-1, ERROR, 5}, {18, SHIFT, 9}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 1}, {0, SHIFT, 5}, },
			{{-1, ERROR, 8}, {2, SHIFT, 11}, },
			{{-1, ERROR, 9}, {1, SHIFT, 13}, {30, SHIFT, 14}, },
			{{-1, REDUCE, 69}, },
			{{-1, ERROR, 11}, {3, SHIFT, 15}, },
			{{-1, ERROR, 12}, {31, SHIFT, 16}, },
			{{-1, ERROR, 13}, {18, SHIFT, 17}, },
			{{-1, ERROR, 14}, {2, SHIFT, 18}, {7, SHIFT, 19}, {8, SHIFT, 20}, {18, SHIFT, 21}, {31, SHIFT, 22}, },
			{{-1, ERROR, 15}, {4, SHIFT, 28}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 17}, {30, SHIFT, 29}, },
			{{-1, ERROR, 18}, {7, SHIFT, 19}, {8, SHIFT, 20}, {18, SHIFT, 21}, },
			{{-1, REDUCE, 24}, {28, SHIFT, 31}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 72}, },
			{{-1, ERROR, 25}, {18, SHIFT, 32}, },
			{{-1, ERROR, 26}, {2, SHIFT, 18}, {7, SHIFT, 19}, {8, SHIFT, 20}, {18, SHIFT, 21}, {31, SHIFT, 33}, },
			{{-1, ERROR, 27}, {2, SHIFT, 18}, {31, SHIFT, 36}, },
			{{-1, ERROR, 28}, {5, SHIFT, 38}, },
			{{-1, ERROR, 29}, {2, SHIFT, 18}, {7, SHIFT, 19}, {8, SHIFT, 20}, {18, SHIFT, 21}, {31, SHIFT, 39}, },
			{{-1, ERROR, 30}, {18, SHIFT, 42}, },
			{{-1, ERROR, 31}, {29, SHIFT, 43}, },
			{{-1, ERROR, 32}, {35, SHIFT, 44}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 71}, },
			{{-1, ERROR, 35}, {2, SHIFT, 18}, {31, SHIFT, 45}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 73}, },
			{{-1, ERROR, 38}, {32, SHIFT, 46}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 40}, {2, SHIFT, 18}, {7, SHIFT, 19}, {8, SHIFT, 20}, {18, SHIFT, 21}, {31, SHIFT, 47}, },
			{{-1, ERROR, 41}, {2, SHIFT, 18}, {31, SHIFT, 49}, },
			{{-1, ERROR, 42}, {32, SHIFT, 50}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 46}, {6, SHIFT, 51}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 48}, {2, SHIFT, 18}, {31, SHIFT, 52}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 19}, {7, SHIFT, 19}, {8, SHIFT, 20}, {18, SHIFT, 21}, },
			{{-1, ERROR, 51}, {28, SHIFT, 56}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 53}, {33, SHIFT, 57}, },
			{{-1, REDUCE, 17}, {36, SHIFT, 58}, },
			{{-1, ERROR, 55}, {18, SHIFT, 61}, },
			{{-1, ERROR, 56}, {29, SHIFT, 62}, },
			{{-1, ERROR, 57}, {30, SHIFT, 63}, },
			{{-1, ERROR, 58}, {7, SHIFT, 19}, {8, SHIFT, 20}, {18, SHIFT, 21}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 18}, {36, SHIFT, 58}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 62}, {18, SHIFT, 66}, },
			{{-1, ERROR, 63}, {7, SHIFT, 19}, {8, SHIFT, 20}, {9, SHIFT, 67}, {11, SHIFT, 68}, {16, SHIFT, 69}, {18, SHIFT, 70}, {30, SHIFT, 71}, {37, SHIFT, 72}, },
			{{-1, ERROR, 64}, {18, SHIFT, 76}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 66}, {33, SHIFT, 77}, },
			{{-1, ERROR, 67}, {32, SHIFT, 78}, },
			{{-1, ERROR, 68}, {32, SHIFT, 79}, },
			{{-1, ERROR, 69}, {13, SHIFT, 80}, {14, SHIFT, 81}, {15, SHIFT, 82}, {17, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {27, SHIFT, 86}, {32, SHIFT, 87}, },
			{{-1, REDUCE, 25}, {26, SHIFT, 97}, {28, SHIFT, 98}, },
			{{-1, ERROR, 71}, {9, SHIFT, 67}, {11, SHIFT, 68}, {18, SHIFT, 99}, {30, SHIFT, 71}, {31, SHIFT, 100}, {37, SHIFT, 72}, },
			{{-1, ERROR, 72}, {32, SHIFT, 102}, },
			{{-1, REDUCE, 74}, },
			{{-1, ERROR, 74}, {7, SHIFT, 19}, {8, SHIFT, 20}, {9, SHIFT, 67}, {11, SHIFT, 68}, {16, SHIFT, 103}, {18, SHIFT, 70}, {30, SHIFT, 71}, {37, SHIFT, 72}, },
			{{-1, ERROR, 75}, {9, SHIFT, 67}, {11, SHIFT, 68}, {16, SHIFT, 105}, {18, SHIFT, 99}, {30, SHIFT, 71}, {37, SHIFT, 72}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 77}, {30, SHIFT, 107}, },
			{{-1, ERROR, 78}, {13, SHIFT, 80}, {14, SHIFT, 81}, {15, SHIFT, 82}, {17, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {27, SHIFT, 86}, {32, SHIFT, 87}, },
			{{-1, ERROR, 79}, {13, SHIFT, 80}, {14, SHIFT, 81}, {15, SHIFT, 82}, {17, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {27, SHIFT, 86}, {32, SHIFT, 87}, },
			{{-1, ERROR, 80}, {7, SHIFT, 110}, {18, SHIFT, 111}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 86}, {13, SHIFT, 80}, {14, SHIFT, 81}, {15, SHIFT, 82}, {17, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {32, SHIFT, 87}, },
			{{-1, ERROR, 87}, {13, SHIFT, 80}, {14, SHIFT, 81}, {15, SHIFT, 82}, {17, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {27, SHIFT, 86}, {32, SHIFT, 87}, },
			{{-1, ERROR, 88}, {35, SHIFT, 114}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 34}, {23, SHIFT, 115}, },
			{{-1, REDUCE, 37}, {24, SHIFT, 118}, },
			{{-1, REDUCE, 41}, {20, SHIFT, 120}, {21, SHIFT, 121}, },
			{{-1, REDUCE, 45}, {22, SHIFT, 126}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 51}, {28, SHIFT, 129}, {34, SHIFT, 130}, },
			{{-1, ERROR, 97}, {13, SHIFT, 80}, {14, SHIFT, 81}, {15, SHIFT, 82}, {17, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {27, SHIFT, 86}, {32, SHIFT, 87}, },
			{{-1, ERROR, 98}, {13, SHIFT, 80}, {14, SHIFT, 81}, {15, SHIFT, 82}, {17, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {27, SHIFT, 86}, {32, SHIFT, 87}, },
			{{-1, ERROR, 99}, {26, SHIFT, 97}, {28, SHIFT, 98}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 101}, {9, SHIFT, 67}, {11, SHIFT, 68}, {18, SHIFT, 99}, {30, SHIFT, 71}, {31, SHIFT, 135}, {37, SHIFT, 72}, },
			{{-1, ERROR, 102}, {13, SHIFT, 80}, {14, SHIFT, 81}, {15, SHIFT, 82}, {17, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {27, SHIFT, 86}, {32, SHIFT, 87}, },
			{{-1, ERROR, 103}, {13, SHIFT, 80}, {14, SHIFT, 81}, {15, SHIFT, 82}, {17, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {27, SHIFT, 86}, {32, SHIFT, 87}, },
			{{-1, ERROR, 104}, {9, SHIFT, 67}, {11, SHIFT, 68}, {16, SHIFT, 138}, {18, SHIFT, 99}, {30, SHIFT, 71}, {37, SHIFT, 72}, },
			{{-1, ERROR, 105}, {13, SHIFT, 80}, {14, SHIFT, 81}, {15, SHIFT, 82}, {17, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {27, SHIFT, 86}, {32, SHIFT, 87}, },
			{{-1, REDUCE, 75}, },
			{{-1, ERROR, 107}, {9, SHIFT, 67}, {11, SHIFT, 68}, {18, SHIFT, 99}, {30, SHIFT, 71}, {37, SHIFT, 72}, },
			{{-1, ERROR, 108}, {33, SHIFT, 141}, },
			{{-1, ERROR, 109}, {33, SHIFT, 142}, },
			{{-1, ERROR, 110}, {28, SHIFT, 143}, },
			{{-1, ERROR, 111}, {32, SHIFT, 144}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 113}, {33, SHIFT, 145}, },
			{{-1, ERROR, 114}, {31, SHIFT, 146}, },
			{{-1, ERROR, 115}, {13, SHIFT, 80}, {14, SHIFT, 81}, {15, SHIFT, 82}, {17, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {27, SHIFT, 86}, {32, SHIFT, 87}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 35}, {23, SHIFT, 115}, },
			{{-1, ERROR, 118}, {13, SHIFT, 80}, {14, SHIFT, 81}, {15, SHIFT, 82}, {17, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {27, SHIFT, 86}, {32, SHIFT, 87}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 120}, {13, SHIFT, 80}, {14, SHIFT, 81}, {15, SHIFT, 82}, {17, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {27, SHIFT, 86}, {32, SHIFT, 87}, },
			{{-1, ERROR, 121}, {13, SHIFT, 80}, {14, SHIFT, 81}, {15, SHIFT, 82}, {17, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {27, SHIFT, 86}, {32, SHIFT, 87}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 40}, {20, SHIFT, 120}, },
			{{-1, REDUCE, 42}, {21, SHIFT, 121}, },
			{{-1, ERROR, 126}, {13, SHIFT, 80}, {14, SHIFT, 81}, {15, SHIFT, 82}, {17, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {27, SHIFT, 86}, {32, SHIFT, 87}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 46}, {22, SHIFT, 126}, },
			{{-1, ERROR, 129}, {13, SHIFT, 80}, {14, SHIFT, 81}, {15, SHIFT, 82}, {17, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {27, SHIFT, 86}, {32, SHIFT, 87}, },
			{{-1, ERROR, 130}, {12, SHIFT, 157}, {18, SHIFT, 158}, },
			{{-1, REDUCE, 86}, },
			{{-1, REDUCE, 52}, {28, SHIFT, 129}, {34, SHIFT, 130}, },
			{{-1, ERROR, 133}, {35, SHIFT, 160}, },
			{{-1, ERROR, 134}, {29, SHIFT, 161}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 136}, {33, SHIFT, 162}, },
			{{-1, ERROR, 137}, {35, SHIFT, 163}, },
			{{-1, ERROR, 138}, {13, SHIFT, 80}, {14, SHIFT, 81}, {15, SHIFT, 82}, {17, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {27, SHIFT, 86}, {32, SHIFT, 87}, },
			{{-1, ERROR, 139}, {35, SHIFT, 165}, },
			{{-1, ERROR, 140}, {31, SHIFT, 166}, },
			{{-1, ERROR, 141}, {9, SHIFT, 67}, {11, SHIFT, 68}, {18, SHIFT, 99}, {30, SHIFT, 71}, {37, SHIFT, 72}, },
			{{-1, ERROR, 142}, {9, SHIFT, 67}, {11, SHIFT, 68}, {18, SHIFT, 99}, {30, SHIFT, 71}, {37, SHIFT, 72}, },
			{{-1, ERROR, 143}, {13, SHIFT, 80}, {14, SHIFT, 81}, {15, SHIFT, 82}, {17, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {27, SHIFT, 86}, {32, SHIFT, 87}, },
			{{-1, ERROR, 144}, {33, SHIFT, 170}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 85}, },
			{{-1, ERROR, 156}, {29, SHIFT, 171}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 158}, {32, SHIFT, 172}, },
			{{-1, REDUCE, 87}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 161}, {26, SHIFT, 173}, },
			{{-1, ERROR, 162}, {35, SHIFT, 174}, },
			{{-1, ERROR, 163}, {31, SHIFT, 175}, },
			{{-1, ERROR, 164}, {35, SHIFT, 176}, },
			{{-1, ERROR, 165}, {31, SHIFT, 177}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 167}, {10, SHIFT, 178}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 169}, {29, SHIFT, 179}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 66}, {13, SHIFT, 80}, {14, SHIFT, 81}, {15, SHIFT, 82}, {17, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {27, SHIFT, 86}, {32, SHIFT, 87}, },
			{{-1, ERROR, 173}, {13, SHIFT, 80}, {14, SHIFT, 81}, {15, SHIFT, 82}, {17, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {27, SHIFT, 86}, {32, SHIFT, 87}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 176}, {31, SHIFT, 183}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 178}, {9, SHIFT, 67}, {11, SHIFT, 68}, {18, SHIFT, 99}, {30, SHIFT, 71}, {37, SHIFT, 72}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 64}, {36, SHIFT, 185}, },
			{{-1, ERROR, 181}, {33, SHIFT, 188}, },
			{{-1, ERROR, 182}, {35, SHIFT, 189}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 185}, {13, SHIFT, 80}, {14, SHIFT, 81}, {15, SHIFT, 82}, {17, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {27, SHIFT, 86}, {32, SHIFT, 87}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 65}, {36, SHIFT, 185}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 89}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, },
			{{-1, 12}, },
			{{-1, 6}, {7, 10}, },
			{{-1, 23}, {26, 34}, {40, 34}, {74, 34}, },
			{{-1, 24}, {27, 37}, {35, 37}, {41, 37}, {48, 37}, },
			{{-1, 53}, },
			{{-1, 59}, {60, 65}, },
			{{-1, 54}, },
			{{-1, 25}, {18, 30}, {50, 55}, {58, 64}, },
			{{-1, 73}, {75, 106}, {101, 106}, {104, 106}, {107, 140}, {141, 167}, {142, 168}, {178, 184}, },
			{{-1, 88}, {78, 108}, {79, 109}, {87, 113}, {97, 133}, {98, 134}, {102, 136}, {103, 137}, {105, 139}, {129, 156}, {138, 164}, {143, 169}, {172, 180}, {173, 182}, {185, 190}, },
			{{-1, 89}, },
			{{-1, 116}, {117, 148}, },
			{{-1, 90}, {115, 147}, },
			{{-1, 119}, },
			{{-1, 91}, {118, 149}, },
			{{-1, 122}, {124, 152}, },
			{{-1, 123}, {125, 153}, },
			{{-1, 92}, {120, 150}, {121, 151}, },
			{{-1, 127}, {128, 155}, },
			{{-1, 93}, {126, 154}, },
			{{-1, 94}, },
			{{-1, 95}, {86, 112}, },
			{{-1, 131}, {132, 159}, },
			{{-1, 96}, },
			{{-1, 181}, },
			{{-1, 186}, {187, 191}, },
			{{-1, 7}, },
			{{-1, 26}, {29, 40}, {63, 74}, },
			{{-1, 27}, {26, 35}, {29, 41}, {40, 48}, },
			{{-1, 75}, {71, 101}, {74, 104}, },
			{{-1, 60}, },
			{{-1, 117}, },
			{{-1, 124}, },
			{{-1, 125}, },
			{{-1, 128}, },
			{{-1, 132}, },
			{{-1, 187}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'class'",
			"expecting: id",
			"expecting: EOF",
			"expecting: 'class', EOF",
			"expecting: '{'",
			"expecting: 'public'",
			"expecting: 'extends', '{'",
			"expecting: 'static'",
			"expecting: '}'",
			"expecting: 'public', 'int', 'boolean', id, '}'",
			"expecting: 'void'",
			"expecting: 'int', 'boolean', id",
			"expecting: id, '['",
			"expecting: 'public', 'int', 'boolean', 'if', 'while', 'return', id, '{', '}', 'System.out.println'",
			"expecting: 'public', '}'",
			"expecting: 'main'",
			"expecting: ']'",
			"expecting: ';'",
			"expecting: '('",
			"expecting: 'String'",
			"expecting: 'int', 'boolean', id, ')'",
			"expecting: '['",
			"expecting: ')'",
			"expecting: ')', ','",
			"expecting: 'int', 'boolean', 'if', 'while', 'return', id, '{', 'System.out.println'",
			"expecting: 'new', 'true', 'false', 'this', id, number, '!', '('",
			"expecting: id, '=', '['",
			"expecting: 'if', 'while', id, '{', '}', 'System.out.println'",
			"expecting: 'if', 'while', 'return', id, '{', '}', 'System.out.println'",
			"expecting: 'if', 'while', 'return', id, '{', 'System.out.println'",
			"expecting: 'int', id",
			"expecting: '+', '-', '*', '&&', '<', '[', ']', ')', '.', ';', ','",
			"expecting: 'new', 'true', 'false', 'this', id, number, '('",
			"expecting: ']', ')', ';', ','",
			"expecting: '&&', ']', ')', ';', ','",
			"expecting: '&&', '<', ']', ')', ';', ','",
			"expecting: '+', '-', '&&', '<', ']', ')', ';', ','",
			"expecting: '+', '-', '*', '&&', '<', ']', ')', ';', ','",
			"expecting: '=', '['",
			"expecting: 'if', 'else', 'while', 'return', id, '{', '}', 'System.out.println'",
			"expecting: 'if', 'while', id, '{', 'System.out.println'",
			"expecting: '+', '&&', '<', ']', ')', ';', ','",
			"expecting: '-', '&&', '<', ']', ')', ';', ','",
			"expecting: 'length', id",
			"expecting: '='",
			"expecting: 'else'",
			"expecting: 'new', 'true', 'false', 'this', id, number, '!', '(', ')'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 1, 3, 3, 5, 6, 3, 7, 8, 1, 9, 10, 3, 4, 11, 12, 1, 1, 3, 13, 14, 1, 9, 14, 15, 9, 1, 16, 17, 3, 13, 14, 3, 14, 18, 3, 9, 14, 18, 1, 13, 3, 19, 3, 14, 3, 20, 21, 3, 22, 23, 1, 16, 4, 11, 23, 23, 23, 1, 24, 1, 23, 22, 18, 18, 25, 26, 27, 18, 28, 24, 29, 23, 4, 25, 25, 30, 31, 31, 31, 31, 31, 32, 25, 17, 33, 34, 35, 36, 37, 37, 37, 31, 25, 25, 38, 39, 27, 25, 25, 29, 25, 28, 40, 22, 22, 21, 18, 37, 22, 8, 25, 34, 34, 25, 34, 25, 25, 41, 42, 41, 42, 25, 37, 37, 25, 43, 31, 31, 17, 16, 39, 22, 17, 25, 17, 8, 40, 40, 25, 22, 31, 14, 34, 34, 34, 41, 42, 41, 42, 37, 37, 16, 31, 18, 31, 39, 44, 17, 8, 17, 8, 8, 45, 39, 16, 31, 31, 46, 25, 39, 14, 8, 14, 40, 31, 23, 22, 17, 14, 39, 25, 23, 23, 31, 39, 23, 23, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
