/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.analysis;

import java.util.Hashtable;

import minijava.node.AAndExp;
import minijava.node.AArrayAssignStatement;
import minijava.node.AArrayLengthExp;
import minijava.node.AArrayLookupExp;
import minijava.node.AArrayType;
import minijava.node.AAssignStatement;
import minijava.node.ABlockStatement;
import minijava.node.ABooleanType;
import minijava.node.ACallExp;
import minijava.node.AClassDecl;
import minijava.node.AEqualExp;
import minijava.node.AFalseExp;
import minijava.node.AFormal;
import minijava.node.AIdentifierExp;
import minijava.node.AIfStatement;
import minijava.node.AIntType;
import minijava.node.AIntegerLiteralExp;
import minijava.node.ALessThanExp;
import minijava.node.AMainClass;
import minijava.node.AMethodDecl;
import minijava.node.AMinusExp;
import minijava.node.ANewArrayExp;
import minijava.node.ANewObjectExp;
import minijava.node.ANotExp;
import minijava.node.AObjectType;
import minijava.node.APlusExp;
import minijava.node.APrintStatement;
import minijava.node.AProgram;
import minijava.node.AThisExp;
import minijava.node.ATimesExp;
import minijava.node.ATrueExp;
import minijava.node.AVarDecl;
import minijava.node.AWhileStatement;
import minijava.node.EOF;
import minijava.node.Node;
import minijava.node.Start;
import minijava.node.TAnd;
import minijava.node.TAttr;
import minijava.node.TBlank;
import minijava.node.TBoolean;
import minijava.node.TClassn;
import minijava.node.TComma;
import minijava.node.TComment;
import minijava.node.TDot;
import minijava.node.TElse;
import minijava.node.TEqualop;
import minijava.node.TExtends;
import minijava.node.TFalse;
import minijava.node.TId;
import minijava.node.TIf;
import minijava.node.TInt;
import minijava.node.TLBrace;
import minijava.node.TLBracket;
import minijava.node.TLParenthese;
import minijava.node.TLength;
import minijava.node.TLess;
import minijava.node.TMain;
import minijava.node.TMinusop;
import minijava.node.TNew;
import minijava.node.TNot;
import minijava.node.TNumber;
import minijava.node.TPlusop;
import minijava.node.TPrint;
import minijava.node.TPublic;
import minijava.node.TRBrace;
import minijava.node.TRBracket;
import minijava.node.TRParenthese;
import minijava.node.TReturn;
import minijava.node.TSemicolon;
import minijava.node.TStatic;
import minijava.node.TString;
import minijava.node.TThis;
import minijava.node.TTimesop;
import minijava.node.TTrue;
import minijava.node.TVoid;
import minijava.node.TWhile;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAProgram(AProgram node)
    {
        defaultCase(node);
    }

    public void caseAMainClass(AMainClass node)
    {
        defaultCase(node);
    }

    public void caseAClassDecl(AClassDecl node)
    {
        defaultCase(node);
    }

    public void caseAVarDecl(AVarDecl node)
    {
        defaultCase(node);
    }

    public void caseAMethodDecl(AMethodDecl node)
    {
        defaultCase(node);
    }

    public void caseAFormal(AFormal node)
    {
        defaultCase(node);
    }

    public void caseAArrayType(AArrayType node)
    {
        defaultCase(node);
    }

    public void caseABooleanType(ABooleanType node)
    {
        defaultCase(node);
    }

    public void caseAIntType(AIntType node)
    {
        defaultCase(node);
    }

    public void caseAObjectType(AObjectType node)
    {
        defaultCase(node);
    }

    public void caseABlockStatement(ABlockStatement node)
    {
        defaultCase(node);
    }

    public void caseAIfStatement(AIfStatement node)
    {
        defaultCase(node);
    }

    public void caseAWhileStatement(AWhileStatement node)
    {
        defaultCase(node);
    }

    public void caseAPrintStatement(APrintStatement node)
    {
        defaultCase(node);
    }

    public void caseAAssignStatement(AAssignStatement node)
    {
        defaultCase(node);
    }

    public void caseAArrayAssignStatement(AArrayAssignStatement node)
    {
        defaultCase(node);
    }

    public void caseAAndExp(AAndExp node)
    {
        defaultCase(node);
    }

    public void caseAEqualExp(AEqualExp node)
    {
        defaultCase(node);
    }

    public void caseALessThanExp(ALessThanExp node)
    {
        defaultCase(node);
    }

    public void caseATimesExp(ATimesExp node)
    {
        defaultCase(node);
    }

    public void caseAPlusExp(APlusExp node)
    {
        defaultCase(node);
    }

    public void caseAMinusExp(AMinusExp node)
    {
        defaultCase(node);
    }

    public void caseAArrayLookupExp(AArrayLookupExp node)
    {
        defaultCase(node);
    }

    public void caseAArrayLengthExp(AArrayLengthExp node)
    {
        defaultCase(node);
    }

    public void caseACallExp(ACallExp node)
    {
        defaultCase(node);
    }

    public void caseAIntegerLiteralExp(AIntegerLiteralExp node)
    {
        defaultCase(node);
    }

    public void caseATrueExp(ATrueExp node)
    {
        defaultCase(node);
    }

    public void caseAFalseExp(AFalseExp node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierExp(AIdentifierExp node)
    {
        defaultCase(node);
    }

    public void caseAThisExp(AThisExp node)
    {
        defaultCase(node);
    }

    public void caseANewArrayExp(ANewArrayExp node)
    {
        defaultCase(node);
    }

    public void caseANewObjectExp(ANewObjectExp node)
    {
        defaultCase(node);
    }

    public void caseANotExp(ANotExp node)
    {
        defaultCase(node);
    }

    public void caseTClassn(TClassn node)
    {
        defaultCase(node);
    }

    public void caseTExtends(TExtends node)
    {
        defaultCase(node);
    }

    public void caseTPublic(TPublic node)
    {
        defaultCase(node);
    }

    public void caseTStatic(TStatic node)
    {
        defaultCase(node);
    }

    public void caseTVoid(TVoid node)
    {
        defaultCase(node);
    }

    public void caseTMain(TMain node)
    {
        defaultCase(node);
    }

    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    public void caseTInt(TInt node)
    {
        defaultCase(node);
    }

    public void caseTBoolean(TBoolean node)
    {
        defaultCase(node);
    }

    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    public void caseTLength(TLength node)
    {
        defaultCase(node);
    }

    public void caseTNew(TNew node)
    {
        defaultCase(node);
    }

    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    public void caseTThis(TThis node)
    {
        defaultCase(node);
    }

    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    public void caseTPlusop(TPlusop node)
    {
        defaultCase(node);
    }

    public void caseTMinusop(TMinusop node)
    {
        defaultCase(node);
    }

    public void caseTTimesop(TTimesop node)
    {
        defaultCase(node);
    }

    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    public void caseTLess(TLess node)
    {
        defaultCase(node);
    }

    public void caseTEqualop(TEqualop node)
    {
        defaultCase(node);
    }

    public void caseTAttr(TAttr node)
    {
        defaultCase(node);
    }

    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    public void caseTLBracket(TLBracket node)
    {
        defaultCase(node);
    }

    public void caseTRBracket(TRBracket node)
    {
        defaultCase(node);
    }

    public void caseTLBrace(TLBrace node)
    {
        defaultCase(node);
    }

    public void caseTRBrace(TRBrace node)
    {
        defaultCase(node);
    }

    public void caseTLParenthese(TLParenthese node)
    {
        defaultCase(node);
    }

    public void caseTRParenthese(TRParenthese node)
    {
        defaultCase(node);
    }

    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    public void caseTPrint(TPrint node)
    {
        defaultCase(node);
    }

    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
