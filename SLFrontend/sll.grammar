Package sll;

Helpers
 letter = [['a' .. 'z'] + ['A' .. 'Z']];
 digit = ['0' .. '9'];
 letter_or_digit = [letter + digit];

Tokens 
 number = ['0' .. '9']+;
 plus = '+';
 minus = '-';
 mult = '*';
 div = '/';
 l_par = '(';
 r_par = ')';
 semicolon = ';';
 comma = ',';
 id = letter letter_or_digit*;
 assign = ':=';
 print = 'print';
 blank = (' ' | 13 | 10)+;

Ignored Tokens
 blank;

Productions
stm = 
/* {compound} [stm1]:stm semicolon [stm2]:stm | */
 {assign} id assign exp;
/* {print} print l_par explist r_par; */

binop = 
 {plus} plus |
 {minus} minus;

exp = 
 {id} id |
 {num} number |
 {op} [exp1]:exp binop [exp2]:exp;
/* {eseq} l_par stm comma exp r_par;*/

explist =
 {pair} exp comma explist |
 {last} exp;

