/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.node;

import java.util.*;
import minijava.analysis.*;

@SuppressWarnings("nls")
public final class AMethodDecl extends PMethodDecl
{
    private PType _type_;
    private TId _methodName_;
    private final LinkedList<PFormal> _parameters_ = new LinkedList<PFormal>();
    private final LinkedList<PVarDecl> _varDecl_ = new LinkedList<PVarDecl>();
    private final LinkedList<PStatement> _statements_ = new LinkedList<PStatement>();
    private PExp _returnExpression_;

    public AMethodDecl()
    {
        // Constructor
    }

    public AMethodDecl(
        @SuppressWarnings("hiding") PType _type_,
        @SuppressWarnings("hiding") TId _methodName_,
        @SuppressWarnings("hiding") List<PFormal> _parameters_,
        @SuppressWarnings("hiding") List<PVarDecl> _varDecl_,
        @SuppressWarnings("hiding") List<PStatement> _statements_,
        @SuppressWarnings("hiding") PExp _returnExpression_)
    {
        // Constructor
        setType(_type_);

        setMethodName(_methodName_);

        setParameters(_parameters_);

        setVarDecl(_varDecl_);

        setStatements(_statements_);

        setReturnExpression(_returnExpression_);

    }

    @Override
    public Object clone()
    {
        return new AMethodDecl(
            cloneNode(this._type_),
            cloneNode(this._methodName_),
            cloneList(this._parameters_),
            cloneList(this._varDecl_),
            cloneList(this._statements_),
            cloneNode(this._returnExpression_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMethodDecl(this);
    }

    public PType getType()
    {
        return this._type_;
    }

    public void setType(PType node)
    {
        if(this._type_ != null)
        {
            this._type_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._type_ = node;
    }

    public TId getMethodName()
    {
        return this._methodName_;
    }

    public void setMethodName(TId node)
    {
        if(this._methodName_ != null)
        {
            this._methodName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._methodName_ = node;
    }

    public LinkedList<PFormal> getParameters()
    {
        return this._parameters_;
    }

    public void setParameters(List<PFormal> list)
    {
        this._parameters_.clear();
        this._parameters_.addAll(list);
        for(PFormal e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PVarDecl> getVarDecl()
    {
        return this._varDecl_;
    }

    public void setVarDecl(List<PVarDecl> list)
    {
        this._varDecl_.clear();
        this._varDecl_.addAll(list);
        for(PVarDecl e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PStatement> getStatements()
    {
        return this._statements_;
    }

    public void setStatements(List<PStatement> list)
    {
        this._statements_.clear();
        this._statements_.addAll(list);
        for(PStatement e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public PExp getReturnExpression()
    {
        return this._returnExpression_;
    }

    public void setReturnExpression(PExp node)
    {
        if(this._returnExpression_ != null)
        {
            this._returnExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._returnExpression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._type_)
            + toString(this._methodName_)
            + toString(this._parameters_)
            + toString(this._varDecl_)
            + toString(this._statements_)
            + toString(this._returnExpression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._type_ == child)
        {
            this._type_ = null;
            return;
        }

        if(this._methodName_ == child)
        {
            this._methodName_ = null;
            return;
        }

        if(this._parameters_.remove(child))
        {
            return;
        }

        if(this._varDecl_.remove(child))
        {
            return;
        }

        if(this._statements_.remove(child))
        {
            return;
        }

        if(this._returnExpression_ == child)
        {
            this._returnExpression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._type_ == oldChild)
        {
            setType((PType) newChild);
            return;
        }

        if(this._methodName_ == oldChild)
        {
            setMethodName((TId) newChild);
            return;
        }

        for(ListIterator<PFormal> i = this._parameters_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PFormal) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PVarDecl> i = this._varDecl_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PVarDecl) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PStatement> i = this._statements_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PStatement) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._returnExpression_ == oldChild)
        {
            setReturnExpression((PExp) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
